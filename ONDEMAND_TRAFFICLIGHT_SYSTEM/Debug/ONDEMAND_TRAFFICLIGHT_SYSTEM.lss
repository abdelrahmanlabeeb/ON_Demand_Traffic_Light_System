
ONDEMAND_TRAFFICLIGHT_SYSTEM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001482  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000014f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  000014f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001528  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e90  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b32  00000000  00000000  000035bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001469  00000000  00000000  000040ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000400  00000000  00000000  00005558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ce  00000000  00000000  00005958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c4f  00000000  00000000  00006226  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00006e75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__vector_1>
       8:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__vector_2>
       c:	0c 94 48 06 	jmp	0xc90	; 0xc90 <__vector_3>
      10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      2c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
      54:	5f 07       	cpc	r21, r31
      56:	64 07       	cpc	r22, r20
      58:	6a 07       	cpc	r22, r26
      5a:	71 07       	cpc	r23, r17
      5c:	77 07       	cpc	r23, r23
      5e:	7d 07       	cpc	r23, r29
      60:	84 07       	cpc	r24, r20
      62:	8a 07       	cpc	r24, r26

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
      70:	20 e0       	ldi	r18, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
      78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
      7a:	a6 36       	cpi	r26, 0x66	; 102
      7c:	b2 07       	cpc	r27, r18
      7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
      80:	0e 94 a7 03 	call	0x74e	; 0x74e <main>
      84:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <_exit>

00000088 <__bad_interrupt>:
      88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <app_init>:
*  Author: Abdelrahman
*/
#include "Application.h"

void app_init(void)
{
      8c:	cf 93       	push	r28
      8e:	df 93       	push	r29
      90:	00 d0       	rcall	.+0      	; 0x92 <app_init+0x6>
      92:	cd b7       	in	r28, 0x3d	; 61
      94:	de b7       	in	r29, 0x3e	; 62
	/*initializing traffic lights as output*/
	LED_init(CAR, Green);
      96:	60 e0       	ldi	r22, 0x00	; 0
      98:	81 e4       	ldi	r24, 0x41	; 65
      9a:	0e 94 8b 03 	call	0x716	; 0x716 <LED_init>
	LED_init(CAR, Yellow);
      9e:	61 e0       	ldi	r22, 0x01	; 1
      a0:	81 e4       	ldi	r24, 0x41	; 65
      a2:	0e 94 8b 03 	call	0x716	; 0x716 <LED_init>
	LED_init(CAR, Red);
      a6:	62 e0       	ldi	r22, 0x02	; 2
      a8:	81 e4       	ldi	r24, 0x41	; 65
      aa:	0e 94 8b 03 	call	0x716	; 0x716 <LED_init>
	// initializing Pedestrian lights as output
	LED_init(Pedestrian,Green);
      ae:	60 e0       	ldi	r22, 0x00	; 0
      b0:	82 e4       	ldi	r24, 0x42	; 66
      b2:	0e 94 8b 03 	call	0x716	; 0x716 <LED_init>
	LED_init(Pedestrian,Yellow);
      b6:	61 e0       	ldi	r22, 0x01	; 1
      b8:	82 e4       	ldi	r24, 0x42	; 66
      ba:	0e 94 8b 03 	call	0x716	; 0x716 <LED_init>
	LED_init(Pedestrian,Red);
      be:	62 e0       	ldi	r22, 0x02	; 2
      c0:	82 e4       	ldi	r24, 0x42	; 66
      c2:	0e 94 8b 03 	call	0x716	; 0x716 <LED_init>
	// initializing Pedestrian button as input
	BUTTON_init('D',button);
      c6:	62 e0       	ldi	r22, 0x02	; 2
      c8:	84 e4       	ldi	r24, 0x44	; 68
      ca:	0e 94 26 02 	call	0x44c	; 0x44c <BUTTON_init>
	// initially the red light is on
	LED_ON(CAR,Red);
      ce:	62 e0       	ldi	r22, 0x02	; 2
      d0:	81 e4       	ldi	r24, 0x41	; 65
      d2:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
	/*set the ISR to call Pedestrian_mode when interrupt triggered */
	set_INT0_callbackptr(Pedestrian_mode);
      d6:	80 e4       	ldi	r24, 0x40	; 64
      d8:	91 e0       	ldi	r25, 0x01	; 1
      da:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <set_INT0_callbackptr>
	/*initialize external interrupt
	*Enable global interrupt
	*Enable INT0 external interrupt
	*set the sense as rising edge*/
	sei;
      de:	8f b7       	in	r24, 0x3f	; 63
      e0:	80 68       	ori	r24, 0x80	; 128
      e2:	8f bf       	out	0x3f, r24	; 63
	EXT_INT_Config int_config;
	int_config.ext_int_num = INT_0;
      e4:	19 82       	std	Y+1, r1	; 0x01
	int_config.ext_int_sense = RISE;
      e6:	83 e0       	ldi	r24, 0x03	; 3
      e8:	8a 83       	std	Y+2, r24	; 0x02
	Ext_INT_init(&int_config);
      ea:	ce 01       	movw	r24, r28
      ec:	01 96       	adiw	r24, 0x01	; 1
      ee:	0e 94 88 05 	call	0xb10	; 0xb10 <Ext_INT_init>

}
      f2:	0f 90       	pop	r0
      f4:	0f 90       	pop	r0
      f6:	df 91       	pop	r29
      f8:	cf 91       	pop	r28
      fa:	08 95       	ret

000000fc <delay_toggle_Car>:
		break;

	}
}
void delay_toggle_Car(double sec)
{
      fc:	cf 92       	push	r12
      fe:	df 92       	push	r13
     100:	ef 92       	push	r14
     102:	ff 92       	push	r15
     104:	6b 01       	movw	r12, r22
     106:	7c 01       	movw	r14, r24
	while (sec > 0.5)
     108:	14 c0       	rjmp	.+40     	; 0x132 <delay_toggle_Car+0x36>
	{
		Delay_s(0.5);
     10a:	60 e0       	ldi	r22, 0x00	; 0
     10c:	70 e0       	ldi	r23, 0x00	; 0
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	9f e3       	ldi	r25, 0x3F	; 63
     112:	0e 94 2c 02 	call	0x458	; 0x458 <Delay_s>
		LED_Toggle(CAR,Yellow);
     116:	61 e0       	ldi	r22, 0x01	; 1
     118:	81 e4       	ldi	r24, 0x41	; 65
     11a:	0e 94 9d 03 	call	0x73a	; 0x73a <LED_Toggle>
		sec -=0.5;
     11e:	20 e0       	ldi	r18, 0x00	; 0
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	40 e0       	ldi	r20, 0x00	; 0
     124:	5f e3       	ldi	r21, 0x3F	; 63
     126:	c7 01       	movw	r24, r14
     128:	b6 01       	movw	r22, r12
     12a:	0e 94 aa 07 	call	0xf54	; 0xf54 <__subsf3>
     12e:	6b 01       	movw	r12, r22
     130:	7c 01       	movw	r14, r24

	}
}
void delay_toggle_Car(double sec)
{
	while (sec > 0.5)
     132:	20 e0       	ldi	r18, 0x00	; 0
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	40 e0       	ldi	r20, 0x00	; 0
     138:	5f e3       	ldi	r21, 0x3F	; 63
     13a:	c7 01       	movw	r24, r14
     13c:	b6 01       	movw	r22, r12
     13e:	0e 94 c7 09 	call	0x138e	; 0x138e <__gesf2>
     142:	18 16       	cp	r1, r24
     144:	14 f3       	brlt	.-60     	; 0x10a <delay_toggle_Car+0xe>
	{
		Delay_s(0.5);
		LED_Toggle(CAR,Yellow);
		sec -=0.5;
	}
	Delay_s(sec);
     146:	c7 01       	movw	r24, r14
     148:	b6 01       	movw	r22, r12
     14a:	0e 94 2c 02 	call	0x458	; 0x458 <Delay_s>
}
     14e:	ff 90       	pop	r15
     150:	ef 90       	pop	r14
     152:	df 90       	pop	r13
     154:	cf 90       	pop	r12
     156:	08 95       	ret

00000158 <app_start>:

	while (1)
	{
		
		//Stage 1 RED OFF, YELLOW ON
		Delay_s(5);
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	70 e0       	ldi	r23, 0x00	; 0
     15c:	80 ea       	ldi	r24, 0xA0	; 160
     15e:	90 e4       	ldi	r25, 0x40	; 64
     160:	0e 94 2c 02 	call	0x458	; 0x458 <Delay_s>
		LED_OFF(CAR,Red);
     164:	62 e0       	ldi	r22, 0x02	; 2
     166:	81 e4       	ldi	r24, 0x41	; 65
     168:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		LED_ON(CAR,Yellow);
     16c:	61 e0       	ldi	r22, 0x01	; 1
     16e:	81 e4       	ldi	r24, 0x41	; 65
     170:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		// STAGE 2 YELLOW OFF, GREEN ON
		delay_toggle_Car(5);
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	70 e0       	ldi	r23, 0x00	; 0
     178:	80 ea       	ldi	r24, 0xA0	; 160
     17a:	90 e4       	ldi	r25, 0x40	; 64
     17c:	0e 94 7e 00 	call	0xfc	; 0xfc <delay_toggle_Car>
		LED_OFF(CAR,Yellow);
     180:	61 e0       	ldi	r22, 0x01	; 1
     182:	81 e4       	ldi	r24, 0x41	; 65
     184:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		LED_ON(CAR,Green);
     188:	60 e0       	ldi	r22, 0x00	; 0
     18a:	81 e4       	ldi	r24, 0x41	; 65
     18c:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		
		//STAGE 3 GREEN OFF, YELLOW ON
		Delay_s(5);
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	80 ea       	ldi	r24, 0xA0	; 160
     196:	90 e4       	ldi	r25, 0x40	; 64
     198:	0e 94 2c 02 	call	0x458	; 0x458 <Delay_s>
		LED_OFF(CAR,Green);
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	81 e4       	ldi	r24, 0x41	; 65
     1a0:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		LED_ON(CAR,Yellow);
     1a4:	61 e0       	ldi	r22, 0x01	; 1
     1a6:	81 e4       	ldi	r24, 0x41	; 65
     1a8:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		
		//STAGE 4 YELLOW OFF, RED ON
		delay_toggle_Car(5);
     1ac:	60 e0       	ldi	r22, 0x00	; 0
     1ae:	70 e0       	ldi	r23, 0x00	; 0
     1b0:	80 ea       	ldi	r24, 0xA0	; 160
     1b2:	90 e4       	ldi	r25, 0x40	; 64
     1b4:	0e 94 7e 00 	call	0xfc	; 0xfc <delay_toggle_Car>
		LED_OFF(CAR,Yellow);
     1b8:	61 e0       	ldi	r22, 0x01	; 1
     1ba:	81 e4       	ldi	r24, 0x41	; 65
     1bc:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		LED_ON(CAR,Red);
     1c0:	62 e0       	ldi	r22, 0x02	; 2
     1c2:	81 e4       	ldi	r24, 0x41	; 65
     1c4:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
     1c8:	c7 cf       	rjmp	.-114    	; 0x158 <app_start>

000001ca <delay_toggle_pedstrain>:
		sec -=0.5;
	}
	Delay_s(sec);
}
void delay_toggle_pedstrain(double sec)
{
     1ca:	cf 92       	push	r12
     1cc:	df 92       	push	r13
     1ce:	ef 92       	push	r14
     1d0:	ff 92       	push	r15
     1d2:	6b 01       	movw	r12, r22
     1d4:	7c 01       	movw	r14, r24
	while (sec > 0.5)
     1d6:	18 c0       	rjmp	.+48     	; 0x208 <delay_toggle_pedstrain+0x3e>
	{
		Delay_s(0.5);
     1d8:	60 e0       	ldi	r22, 0x00	; 0
     1da:	70 e0       	ldi	r23, 0x00	; 0
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	9f e3       	ldi	r25, 0x3F	; 63
     1e0:	0e 94 2c 02 	call	0x458	; 0x458 <Delay_s>
		LED_Toggle(CAR,Yellow);
     1e4:	61 e0       	ldi	r22, 0x01	; 1
     1e6:	81 e4       	ldi	r24, 0x41	; 65
     1e8:	0e 94 9d 03 	call	0x73a	; 0x73a <LED_Toggle>
		LED_Toggle(Pedestrian,Yellow);
     1ec:	61 e0       	ldi	r22, 0x01	; 1
     1ee:	82 e4       	ldi	r24, 0x42	; 66
     1f0:	0e 94 9d 03 	call	0x73a	; 0x73a <LED_Toggle>
		sec -=0.5;
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	5f e3       	ldi	r21, 0x3F	; 63
     1fc:	c7 01       	movw	r24, r14
     1fe:	b6 01       	movw	r22, r12
     200:	0e 94 aa 07 	call	0xf54	; 0xf54 <__subsf3>
     204:	6b 01       	movw	r12, r22
     206:	7c 01       	movw	r14, r24
	}
	Delay_s(sec);
}
void delay_toggle_pedstrain(double sec)
{
	while (sec > 0.5)
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	40 e0       	ldi	r20, 0x00	; 0
     20e:	5f e3       	ldi	r21, 0x3F	; 63
     210:	c7 01       	movw	r24, r14
     212:	b6 01       	movw	r22, r12
     214:	0e 94 c7 09 	call	0x138e	; 0x138e <__gesf2>
     218:	18 16       	cp	r1, r24
     21a:	f4 f2       	brlt	.-68     	; 0x1d8 <delay_toggle_pedstrain+0xe>
		Delay_s(0.5);
		LED_Toggle(CAR,Yellow);
		LED_Toggle(Pedestrian,Yellow);
		sec -=0.5;
	}
	Delay_s(sec);
     21c:	c7 01       	movw	r24, r14
     21e:	b6 01       	movw	r22, r12
     220:	0e 94 2c 02 	call	0x458	; 0x458 <Delay_s>
}
     224:	ff 90       	pop	r15
     226:	ef 90       	pop	r14
     228:	df 90       	pop	r13
     22a:	cf 90       	pop	r12
     22c:	08 95       	ret

0000022e <Read_Car>:


void Read_Car(uint8_t *LEDptr)
{
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	ec 01       	movw	r28, r24
	/*
	* reads which light is on in car traffic lights 
	* sends the open light to the address pointed to by LEDptrr
	*/
	LED_read(CAR,Green,LEDptr); // Reads the pin connected to Green light 
     234:	ac 01       	movw	r20, r24
     236:	60 e0       	ldi	r22, 0x00	; 0
     238:	81 e4       	ldi	r24, 0x41	; 65
     23a:	0e 94 a2 03 	call	0x744	; 0x744 <LED_read>
	if(*LEDptr == L_HIGH)// if its on
     23e:	88 81       	ld	r24, Y
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	11 f4       	brne	.+4      	; 0x248 <Read_Car+0x1a>
	*LEDptr = Green;// returns Green 
     244:	18 82       	st	Y, r1
     246:	19 c0       	rjmp	.+50     	; 0x27a <Read_Car+0x4c>
	else
	{
		LED_read(CAR,Yellow,LEDptr); // Reads the pin connected to yellow light 
     248:	ae 01       	movw	r20, r28
     24a:	61 e0       	ldi	r22, 0x01	; 1
     24c:	81 e4       	ldi	r24, 0x41	; 65
     24e:	0e 94 a2 03 	call	0x744	; 0x744 <LED_read>
		if(*LEDptr == L_HIGH) // if its on
     252:	88 81       	ld	r24, Y
     254:	81 30       	cpi	r24, 0x01	; 1
     256:	11 f4       	brne	.+4      	; 0x25c <Read_Car+0x2e>
		*LEDptr = Yellow; // returns Yellow 
     258:	88 83       	st	Y, r24
     25a:	0a c0       	rjmp	.+20     	; 0x270 <Read_Car+0x42>
		else
		{
			LED_read(CAR,Red,LEDptr);  // Reads the pin connected to Red light
     25c:	ae 01       	movw	r20, r28
     25e:	62 e0       	ldi	r22, 0x02	; 2
     260:	81 e4       	ldi	r24, 0x41	; 65
     262:	0e 94 a2 03 	call	0x744	; 0x744 <LED_read>
			if(*LEDptr == L_HIGH) // if its on
     266:	88 81       	ld	r24, Y
     268:	81 30       	cpi	r24, 0x01	; 1
     26a:	11 f4       	brne	.+4      	; 0x270 <Read_Car+0x42>
			*LEDptr = Red; // returns Red 
     26c:	82 e0       	ldi	r24, 0x02	; 2
     26e:	88 83       	st	Y, r24
		}
	
	if(*LEDptr == L_LOW) // in case all lights are off 
     270:	88 81       	ld	r24, Y
     272:	81 11       	cpse	r24, r1
     274:	02 c0       	rjmp	.+4      	; 0x27a <Read_Car+0x4c>
	*LEDptr = Yellow; // then the Yellow is blinking state so we set LED as yellow 
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	88 83       	st	Y, r24
	}
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	08 95       	ret

00000280 <Pedestrian_mode>:
	}
	
}

void Pedestrian_mode(void)
{
     280:	cf 93       	push	r28
     282:	df 93       	push	r29
     284:	1f 92       	push	r1
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
	uint8_t state = 0;
     28a:	19 82       	std	Y+1, r1	; 0x01
	Read_Car(&state); // read traffic light state (which light is on at the moment)
     28c:	ce 01       	movw	r24, r28
     28e:	01 96       	adiw	r24, 0x01	; 1
     290:	0e 94 17 01 	call	0x22e	; 0x22e <Read_Car>
	switch(state)
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	81 30       	cpi	r24, 0x01	; 1
     298:	09 f4       	brne	.+2      	; 0x29c <Pedestrian_mode+0x1c>
     29a:	74 c0       	rjmp	.+232    	; 0x384 <Pedestrian_mode+0x104>
     29c:	90 f0       	brcs	.+36     	; 0x2c2 <Pedestrian_mode+0x42>
     29e:	82 30       	cpi	r24, 0x02	; 2
     2a0:	09 f0       	breq	.+2      	; 0x2a4 <Pedestrian_mode+0x24>
     2a2:	d0 c0       	rjmp	.+416    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
	{
		case Red: // in case of red light is on
		LED_ON(Pedestrian,Green); // turn pedestrian green light on
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	82 e4       	ldi	r24, 0x42	; 66
     2a8:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		Delay_s(5);
     2ac:	60 e0       	ldi	r22, 0x00	; 0
     2ae:	70 e0       	ldi	r23, 0x00	; 0
     2b0:	80 ea       	ldi	r24, 0xA0	; 160
     2b2:	90 e4       	ldi	r25, 0x40	; 64
     2b4:	0e 94 2c 02 	call	0x458	; 0x458 <Delay_s>
		LED_OFF(Pedestrian,Green); // turn pedestrian lights off and back to normal mode
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	82 e4       	ldi	r24, 0x42	; 66
     2bc:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		break;
     2c0:	c1 c0       	rjmp	.+386    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
		
		case Green: // in case of green light is on
		// STAGE 1 Car yellow and green on, Pedestrian yellow and red on
		LED_ON(CAR,Yellow);
     2c2:	61 e0       	ldi	r22, 0x01	; 1
     2c4:	81 e4       	ldi	r24, 0x41	; 65
     2c6:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		LED_ON(Pedestrian,Red);
     2ca:	62 e0       	ldi	r22, 0x02	; 2
     2cc:	82 e4       	ldi	r24, 0x42	; 66
     2ce:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		LED_ON(Pedestrian,Yellow);
     2d2:	61 e0       	ldi	r22, 0x01	; 1
     2d4:	82 e4       	ldi	r24, 0x42	; 66
     2d6:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		delay_toggle_pedstrain(5);
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	70 e0       	ldi	r23, 0x00	; 0
     2de:	80 ea       	ldi	r24, 0xA0	; 160
     2e0:	90 e4       	ldi	r25, 0x40	; 64
     2e2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <delay_toggle_pedstrain>
		
		//STAGE 2  Car red on , Pedestrian green on
		LED_OFF(CAR,Green);
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	81 e4       	ldi	r24, 0x41	; 65
     2ea:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		LED_ON(CAR,Red);
     2ee:	62 e0       	ldi	r22, 0x02	; 2
     2f0:	81 e4       	ldi	r24, 0x41	; 65
     2f2:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		LED_OFF(CAR,Yellow);
     2f6:	61 e0       	ldi	r22, 0x01	; 1
     2f8:	81 e4       	ldi	r24, 0x41	; 65
     2fa:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		LED_OFF(Pedestrian,Red);
     2fe:	62 e0       	ldi	r22, 0x02	; 2
     300:	82 e4       	ldi	r24, 0x42	; 66
     302:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		LED_ON(Pedestrian,Green);
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	82 e4       	ldi	r24, 0x42	; 66
     30a:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		LED_OFF(Pedestrian,Yellow);
     30e:	61 e0       	ldi	r22, 0x01	; 1
     310:	82 e4       	ldi	r24, 0x42	; 66
     312:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		Delay_s(5);
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	80 ea       	ldi	r24, 0xA0	; 160
     31c:	90 e4       	ldi	r25, 0x40	; 64
     31e:	0e 94 2c 02 	call	0x458	; 0x458 <Delay_s>
		
		// STAGE 3 Car  Yellow on , Pedestrian yellow on
		LED_OFF(CAR,Red);
     322:	62 e0       	ldi	r22, 0x02	; 2
     324:	81 e4       	ldi	r24, 0x41	; 65
     326:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		LED_ON(CAR,Yellow);
     32a:	61 e0       	ldi	r22, 0x01	; 1
     32c:	81 e4       	ldi	r24, 0x41	; 65
     32e:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		LED_ON(Pedestrian,Yellow);
     332:	61 e0       	ldi	r22, 0x01	; 1
     334:	82 e4       	ldi	r24, 0x42	; 66
     336:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		delay_toggle_pedstrain(5);
     33a:	60 e0       	ldi	r22, 0x00	; 0
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	80 ea       	ldi	r24, 0xA0	; 160
     340:	90 e4       	ldi	r25, 0x40	; 64
     342:	0e 94 e5 00 	call	0x1ca	; 0x1ca <delay_toggle_pedstrain>
		
		// STAGE 4 Car green on , Pedestrian red on
		LED_OFF(Pedestrian,Green);
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	82 e4       	ldi	r24, 0x42	; 66
     34a:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		LED_ON(Pedestrian,Red);
     34e:	62 e0       	ldi	r22, 0x02	; 2
     350:	82 e4       	ldi	r24, 0x42	; 66
     352:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		LED_OFF(Pedestrian,Yellow);
     356:	61 e0       	ldi	r22, 0x01	; 1
     358:	82 e4       	ldi	r24, 0x42	; 66
     35a:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		LED_ON(CAR,Green);
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	81 e4       	ldi	r24, 0x41	; 65
     362:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		LED_OFF(CAR,Yellow);
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	81 e4       	ldi	r24, 0x41	; 65
     36a:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		Delay_s(5);
     36e:	60 e0       	ldi	r22, 0x00	; 0
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	80 ea       	ldi	r24, 0xA0	; 160
     374:	90 e4       	ldi	r25, 0x40	; 64
     376:	0e 94 2c 02 	call	0x458	; 0x458 <Delay_s>
		
		// Pedestrian lights off, back to normal mode
		LED_OFF(Pedestrian,Red);
     37a:	62 e0       	ldi	r22, 0x02	; 2
     37c:	82 e4       	ldi	r24, 0x42	; 66
     37e:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		break;
     382:	60 c0       	rjmp	.+192    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
		
		case Yellow: // in case of yellow light is on
		// STAGE 1 Car yellow on, Pedestrian yellow and red on
		LED_ON(CAR,Yellow);
     384:	61 e0       	ldi	r22, 0x01	; 1
     386:	81 e4       	ldi	r24, 0x41	; 65
     388:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		LED_ON(Pedestrian,Red);
     38c:	62 e0       	ldi	r22, 0x02	; 2
     38e:	82 e4       	ldi	r24, 0x42	; 66
     390:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		LED_ON(Pedestrian,Yellow);
     394:	61 e0       	ldi	r22, 0x01	; 1
     396:	82 e4       	ldi	r24, 0x42	; 66
     398:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		delay_toggle_pedstrain(5);
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	80 ea       	ldi	r24, 0xA0	; 160
     3a2:	90 e4       	ldi	r25, 0x40	; 64
     3a4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <delay_toggle_pedstrain>
		
		//STAGE 2  Car red on , Pedestrian green on
		LED_ON(CAR,Red);
     3a8:	62 e0       	ldi	r22, 0x02	; 2
     3aa:	81 e4       	ldi	r24, 0x41	; 65
     3ac:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		LED_OFF(CAR,Yellow);
     3b0:	61 e0       	ldi	r22, 0x01	; 1
     3b2:	81 e4       	ldi	r24, 0x41	; 65
     3b4:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		LED_OFF(Pedestrian,Red);
     3b8:	62 e0       	ldi	r22, 0x02	; 2
     3ba:	82 e4       	ldi	r24, 0x42	; 66
     3bc:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		LED_ON(Pedestrian,Green);
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	82 e4       	ldi	r24, 0x42	; 66
     3c4:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		LED_OFF(Pedestrian,Yellow);
     3c8:	61 e0       	ldi	r22, 0x01	; 1
     3ca:	82 e4       	ldi	r24, 0x42	; 66
     3cc:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		Delay_s(5);
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	80 ea       	ldi	r24, 0xA0	; 160
     3d6:	90 e4       	ldi	r25, 0x40	; 64
     3d8:	0e 94 2c 02 	call	0x458	; 0x458 <Delay_s>
		
		// STAGE 3 Car  Yellow on , Pedestrian yellow on
		LED_OFF(CAR,Red);
     3dc:	62 e0       	ldi	r22, 0x02	; 2
     3de:	81 e4       	ldi	r24, 0x41	; 65
     3e0:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		LED_ON(CAR,Yellow);
     3e4:	61 e0       	ldi	r22, 0x01	; 1
     3e6:	81 e4       	ldi	r24, 0x41	; 65
     3e8:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		LED_ON(Pedestrian,Yellow);
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	82 e4       	ldi	r24, 0x42	; 66
     3f0:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		delay_toggle_pedstrain(5);
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	80 ea       	ldi	r24, 0xA0	; 160
     3fa:	90 e4       	ldi	r25, 0x40	; 64
     3fc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <delay_toggle_pedstrain>
		
		// STAGE 4 Car green on , Pedestrian red on
		LED_OFF(Pedestrian,Green);
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	82 e4       	ldi	r24, 0x42	; 66
     404:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		LED_ON(Pedestrian,Red);
     408:	62 e0       	ldi	r22, 0x02	; 2
     40a:	82 e4       	ldi	r24, 0x42	; 66
     40c:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		LED_OFF(Pedestrian,Yellow);
     410:	61 e0       	ldi	r22, 0x01	; 1
     412:	82 e4       	ldi	r24, 0x42	; 66
     414:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		LED_ON(CAR,Green);
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	81 e4       	ldi	r24, 0x41	; 65
     41c:	0e 94 91 03 	call	0x722	; 0x722 <LED_ON>
		LED_OFF(CAR,Yellow);
     420:	61 e0       	ldi	r22, 0x01	; 1
     422:	81 e4       	ldi	r24, 0x41	; 65
     424:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		Delay_s(5);
     428:	60 e0       	ldi	r22, 0x00	; 0
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	80 ea       	ldi	r24, 0xA0	; 160
     42e:	90 e4       	ldi	r25, 0x40	; 64
     430:	0e 94 2c 02 	call	0x458	; 0x458 <Delay_s>
		
		// Pedestrian lights off, back to normal mode
		LED_OFF(Pedestrian,Red);
     434:	62 e0       	ldi	r22, 0x02	; 2
     436:	82 e4       	ldi	r24, 0x42	; 66
     438:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		LED_OFF(CAR,Green);
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	81 e4       	ldi	r24, 0x41	; 65
     440:	0e 94 97 03 	call	0x72e	; 0x72e <LED_OFF>
		
		default:
		break;

	}
}
     444:	0f 90       	pop	r0
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <BUTTON_init>:
 */ 
#include "BUTTON.h"

EN_Push_Button_Error BUTTON_init(uint8_t portname,uint8_t pinnumber)
{
	if (DIO_init(portname,pinnumber,IN) == OK_DIO) // initializes the pin as input
     44c:	40 e0       	ldi	r20, 0x00	; 0
     44e:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_init>
     452:	81 11       	cpse	r24, r1
	return OK_PB;
	else 
	return DIO_Error;
     454:	81 e0       	ldi	r24, 0x01	; 1
}
     456:	08 95       	ret

00000458 <Delay_s>:
#include "delay.h"



EN_Delay_Error Delay_s(double sec)
{
     458:	cf 92       	push	r12
     45a:	df 92       	push	r13
     45c:	ef 92       	push	r14
     45e:	ff 92       	push	r15
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	64 97       	sbiw	r28, 0x14	; 20
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	6b 01       	movw	r12, r22
     476:	7c 01       	movw	r14, r24
volatile unsigned long F_CPU = 1000000;
     478:	80 e4       	ldi	r24, 0x40	; 64
     47a:	92 e4       	ldi	r25, 0x42	; 66
     47c:	af e0       	ldi	r26, 0x0F	; 15
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	89 83       	std	Y+1, r24	; 0x01
     482:	9a 83       	std	Y+2, r25	; 0x02
     484:	ab 83       	std	Y+3, r26	; 0x03
     486:	bc 83       	std	Y+4, r27	; 0x04
volatile double clock_cycle = 1.0/F_CPU;
     488:	69 81       	ldd	r22, Y+1	; 0x01
     48a:	7a 81       	ldd	r23, Y+2	; 0x02
     48c:	8b 81       	ldd	r24, Y+3	; 0x03
     48e:	9c 81       	ldd	r25, Y+4	; 0x04
     490:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__floatunsisf>
     494:	9b 01       	movw	r18, r22
     496:	ac 01       	movw	r20, r24
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	80 e8       	ldi	r24, 0x80	; 128
     49e:	9f e3       	ldi	r25, 0x3F	; 63
     4a0:	0e 94 33 08 	call	0x1066	; 0x1066 <__divsf3>
     4a4:	6d 83       	std	Y+5, r22	; 0x05
     4a6:	7e 83       	std	Y+6, r23	; 0x06
     4a8:	8f 83       	std	Y+7, r24	; 0x07
     4aa:	98 87       	std	Y+8, r25	; 0x08
volatile double tick_time;
TIFR |= (1<<2);
     4ac:	88 b7       	in	r24, 0x38	; 56
     4ae:	84 60       	ori	r24, 0x04	; 4
     4b0:	88 bf       	out	0x38, r24	; 56
Timer_config_type timer_1_config;
timer_1_config.timer_num = Timer_1; /*use timer 1 to get wide range of delays without number of overflows*/
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	8d 87       	std	Y+13, r24	; 0x0d
timer_1_config.OCR_init = 0;
     4b6:	1b 8a       	std	Y+19, r1	; 0x13
     4b8:	1a 8a       	std	Y+18, r1	; 0x12
timer_1_config.timer_mode = Overflow;
     4ba:	1e 86       	std	Y+14, r1	; 0x0e
if (sec > 16.777216)
     4bc:	2d eb       	ldi	r18, 0xBD	; 189
     4be:	37 e3       	ldi	r19, 0x37	; 55
     4c0:	46 e8       	ldi	r20, 0x86	; 134
     4c2:	51 e4       	ldi	r21, 0x41	; 65
     4c4:	c7 01       	movw	r24, r14
     4c6:	b6 01       	movw	r22, r12
     4c8:	0e 94 c7 09 	call	0x138e	; 0x138e <__gesf2>
     4cc:	18 16       	cp	r1, r24
     4ce:	3c f5       	brge	.+78     	; 0x51e <Delay_s+0xc6>
{
timer_1_config.timer_prescaler = CPU_1024;
     4d0:	87 e0       	ldi	r24, 0x07	; 7
     4d2:	8f 87       	std	Y+15, r24	; 0x0f
tick_time = clock_cycle*1024;
     4d4:	6d 81       	ldd	r22, Y+5	; 0x05
     4d6:	7e 81       	ldd	r23, Y+6	; 0x06
     4d8:	8f 81       	ldd	r24, Y+7	; 0x07
     4da:	98 85       	ldd	r25, Y+8	; 0x08
     4dc:	20 e0       	ldi	r18, 0x00	; 0
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	40 e8       	ldi	r20, 0x80	; 128
     4e2:	54 e4       	ldi	r21, 0x44	; 68
     4e4:	0e 94 cc 09 	call	0x1398	; 0x1398 <__mulsf3>
     4e8:	69 87       	std	Y+9, r22	; 0x09
     4ea:	7a 87       	std	Y+10, r23	; 0x0a
     4ec:	8b 87       	std	Y+11, r24	; 0x0b
     4ee:	9c 87       	std	Y+12, r25	; 0x0c
timer_1_config.TCNT_init = ceil(pow(2,16)-(sec/tick_time));
     4f0:	29 85       	ldd	r18, Y+9	; 0x09
     4f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     4f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     4f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     4f8:	c7 01       	movw	r24, r14
     4fa:	b6 01       	movw	r22, r12
     4fc:	0e 94 33 08 	call	0x1066	; 0x1066 <__divsf3>
     500:	9b 01       	movw	r18, r22
     502:	ac 01       	movw	r20, r24
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	80 e8       	ldi	r24, 0x80	; 128
     50a:	97 e4       	ldi	r25, 0x47	; 71
     50c:	0e 94 aa 07 	call	0xf54	; 0xf54 <__subsf3>
     510:	0e 94 17 08 	call	0x102e	; 0x102e <ceil>
     514:	0e 94 a5 08 	call	0x114a	; 0x114a <__fixunssfsi>
     518:	79 8b       	std	Y+17, r23	; 0x11
     51a:	68 8b       	std	Y+16, r22	; 0x10
     51c:	db c0       	rjmp	.+438    	; 0x6d4 <Delay_s+0x27c>
}
else if (sec > 4.194304 && sec<16.777216)
     51e:	2d eb       	ldi	r18, 0xBD	; 189
     520:	37 e3       	ldi	r19, 0x37	; 55
     522:	46 e8       	ldi	r20, 0x86	; 134
     524:	50 e4       	ldi	r21, 0x40	; 64
     526:	c7 01       	movw	r24, r14
     528:	b6 01       	movw	r22, r12
     52a:	0e 94 c7 09 	call	0x138e	; 0x138e <__gesf2>
     52e:	18 16       	cp	r1, r24
     530:	8c f5       	brge	.+98     	; 0x594 <Delay_s+0x13c>
     532:	2d eb       	ldi	r18, 0xBD	; 189
     534:	37 e3       	ldi	r19, 0x37	; 55
     536:	46 e8       	ldi	r20, 0x86	; 134
     538:	51 e4       	ldi	r21, 0x41	; 65
     53a:	c7 01       	movw	r24, r14
     53c:	b6 01       	movw	r22, r12
     53e:	0e 94 2e 08 	call	0x105c	; 0x105c <__cmpsf2>
     542:	88 23       	and	r24, r24
     544:	3c f5       	brge	.+78     	; 0x594 <Delay_s+0x13c>
{
	timer_1_config.timer_prescaler = CPU_256;
     546:	86 e0       	ldi	r24, 0x06	; 6
     548:	8f 87       	std	Y+15, r24	; 0x0f
	tick_time = clock_cycle*256;
     54a:	6d 81       	ldd	r22, Y+5	; 0x05
     54c:	7e 81       	ldd	r23, Y+6	; 0x06
     54e:	8f 81       	ldd	r24, Y+7	; 0x07
     550:	98 85       	ldd	r25, Y+8	; 0x08
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	40 e8       	ldi	r20, 0x80	; 128
     558:	53 e4       	ldi	r21, 0x43	; 67
     55a:	0e 94 cc 09 	call	0x1398	; 0x1398 <__mulsf3>
     55e:	69 87       	std	Y+9, r22	; 0x09
     560:	7a 87       	std	Y+10, r23	; 0x0a
     562:	8b 87       	std	Y+11, r24	; 0x0b
     564:	9c 87       	std	Y+12, r25	; 0x0c
	timer_1_config.TCNT_init = ceil(pow(2,16)-(sec/tick_time));
     566:	29 85       	ldd	r18, Y+9	; 0x09
     568:	3a 85       	ldd	r19, Y+10	; 0x0a
     56a:	4b 85       	ldd	r20, Y+11	; 0x0b
     56c:	5c 85       	ldd	r21, Y+12	; 0x0c
     56e:	c7 01       	movw	r24, r14
     570:	b6 01       	movw	r22, r12
     572:	0e 94 33 08 	call	0x1066	; 0x1066 <__divsf3>
     576:	9b 01       	movw	r18, r22
     578:	ac 01       	movw	r20, r24
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	70 e0       	ldi	r23, 0x00	; 0
     57e:	80 e8       	ldi	r24, 0x80	; 128
     580:	97 e4       	ldi	r25, 0x47	; 71
     582:	0e 94 aa 07 	call	0xf54	; 0xf54 <__subsf3>
     586:	0e 94 17 08 	call	0x102e	; 0x102e <ceil>
     58a:	0e 94 a5 08 	call	0x114a	; 0x114a <__fixunssfsi>
     58e:	79 8b       	std	Y+17, r23	; 0x11
     590:	68 8b       	std	Y+16, r22	; 0x10
     592:	a0 c0       	rjmp	.+320    	; 0x6d4 <Delay_s+0x27c>
}
else if (sec > 0.524288 && sec<4.194304)
     594:	2d eb       	ldi	r18, 0xBD	; 189
     596:	37 e3       	ldi	r19, 0x37	; 55
     598:	46 e0       	ldi	r20, 0x06	; 6
     59a:	5f e3       	ldi	r21, 0x3F	; 63
     59c:	c7 01       	movw	r24, r14
     59e:	b6 01       	movw	r22, r12
     5a0:	0e 94 c7 09 	call	0x138e	; 0x138e <__gesf2>
     5a4:	18 16       	cp	r1, r24
     5a6:	8c f5       	brge	.+98     	; 0x60a <Delay_s+0x1b2>
     5a8:	2d eb       	ldi	r18, 0xBD	; 189
     5aa:	37 e3       	ldi	r19, 0x37	; 55
     5ac:	46 e8       	ldi	r20, 0x86	; 134
     5ae:	50 e4       	ldi	r21, 0x40	; 64
     5b0:	c7 01       	movw	r24, r14
     5b2:	b6 01       	movw	r22, r12
     5b4:	0e 94 2e 08 	call	0x105c	; 0x105c <__cmpsf2>
     5b8:	88 23       	and	r24, r24
     5ba:	3c f5       	brge	.+78     	; 0x60a <Delay_s+0x1b2>
{
		timer_1_config.timer_prescaler = CPU_64;
     5bc:	84 e0       	ldi	r24, 0x04	; 4
     5be:	8f 87       	std	Y+15, r24	; 0x0f
		tick_time = clock_cycle*64;
     5c0:	6d 81       	ldd	r22, Y+5	; 0x05
     5c2:	7e 81       	ldd	r23, Y+6	; 0x06
     5c4:	8f 81       	ldd	r24, Y+7	; 0x07
     5c6:	98 85       	ldd	r25, Y+8	; 0x08
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	40 e8       	ldi	r20, 0x80	; 128
     5ce:	52 e4       	ldi	r21, 0x42	; 66
     5d0:	0e 94 cc 09 	call	0x1398	; 0x1398 <__mulsf3>
     5d4:	69 87       	std	Y+9, r22	; 0x09
     5d6:	7a 87       	std	Y+10, r23	; 0x0a
     5d8:	8b 87       	std	Y+11, r24	; 0x0b
     5da:	9c 87       	std	Y+12, r25	; 0x0c
		timer_1_config.TCNT_init = ceil(pow(2,16)-(sec/tick_time));
     5dc:	29 85       	ldd	r18, Y+9	; 0x09
     5de:	3a 85       	ldd	r19, Y+10	; 0x0a
     5e0:	4b 85       	ldd	r20, Y+11	; 0x0b
     5e2:	5c 85       	ldd	r21, Y+12	; 0x0c
     5e4:	c7 01       	movw	r24, r14
     5e6:	b6 01       	movw	r22, r12
     5e8:	0e 94 33 08 	call	0x1066	; 0x1066 <__divsf3>
     5ec:	9b 01       	movw	r18, r22
     5ee:	ac 01       	movw	r20, r24
     5f0:	60 e0       	ldi	r22, 0x00	; 0
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	80 e8       	ldi	r24, 0x80	; 128
     5f6:	97 e4       	ldi	r25, 0x47	; 71
     5f8:	0e 94 aa 07 	call	0xf54	; 0xf54 <__subsf3>
     5fc:	0e 94 17 08 	call	0x102e	; 0x102e <ceil>
     600:	0e 94 a5 08 	call	0x114a	; 0x114a <__fixunssfsi>
     604:	79 8b       	std	Y+17, r23	; 0x11
     606:	68 8b       	std	Y+16, r22	; 0x10
     608:	65 c0       	rjmp	.+202    	; 0x6d4 <Delay_s+0x27c>
}
else if (sec > 0.065536 && sec<0.524288)
     60a:	2d eb       	ldi	r18, 0xBD	; 189
     60c:	37 e3       	ldi	r19, 0x37	; 55
     60e:	46 e8       	ldi	r20, 0x86	; 134
     610:	5d e3       	ldi	r21, 0x3D	; 61
     612:	c7 01       	movw	r24, r14
     614:	b6 01       	movw	r22, r12
     616:	0e 94 c7 09 	call	0x138e	; 0x138e <__gesf2>
     61a:	18 16       	cp	r1, r24
     61c:	8c f5       	brge	.+98     	; 0x680 <Delay_s+0x228>
     61e:	2d eb       	ldi	r18, 0xBD	; 189
     620:	37 e3       	ldi	r19, 0x37	; 55
     622:	46 e0       	ldi	r20, 0x06	; 6
     624:	5f e3       	ldi	r21, 0x3F	; 63
     626:	c7 01       	movw	r24, r14
     628:	b6 01       	movw	r22, r12
     62a:	0e 94 2e 08 	call	0x105c	; 0x105c <__cmpsf2>
     62e:	88 23       	and	r24, r24
     630:	3c f5       	brge	.+78     	; 0x680 <Delay_s+0x228>
{
	timer_1_config.timer_prescaler = CPU_8;
     632:	82 e0       	ldi	r24, 0x02	; 2
     634:	8f 87       	std	Y+15, r24	; 0x0f
	tick_time = clock_cycle*8;
     636:	6d 81       	ldd	r22, Y+5	; 0x05
     638:	7e 81       	ldd	r23, Y+6	; 0x06
     63a:	8f 81       	ldd	r24, Y+7	; 0x07
     63c:	98 85       	ldd	r25, Y+8	; 0x08
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	40 e0       	ldi	r20, 0x00	; 0
     644:	51 e4       	ldi	r21, 0x41	; 65
     646:	0e 94 cc 09 	call	0x1398	; 0x1398 <__mulsf3>
     64a:	69 87       	std	Y+9, r22	; 0x09
     64c:	7a 87       	std	Y+10, r23	; 0x0a
     64e:	8b 87       	std	Y+11, r24	; 0x0b
     650:	9c 87       	std	Y+12, r25	; 0x0c
	timer_1_config.TCNT_init = ceil(pow(2,16)-(sec/tick_time));
     652:	29 85       	ldd	r18, Y+9	; 0x09
     654:	3a 85       	ldd	r19, Y+10	; 0x0a
     656:	4b 85       	ldd	r20, Y+11	; 0x0b
     658:	5c 85       	ldd	r21, Y+12	; 0x0c
     65a:	c7 01       	movw	r24, r14
     65c:	b6 01       	movw	r22, r12
     65e:	0e 94 33 08 	call	0x1066	; 0x1066 <__divsf3>
     662:	9b 01       	movw	r18, r22
     664:	ac 01       	movw	r20, r24
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	80 e8       	ldi	r24, 0x80	; 128
     66c:	97 e4       	ldi	r25, 0x47	; 71
     66e:	0e 94 aa 07 	call	0xf54	; 0xf54 <__subsf3>
     672:	0e 94 17 08 	call	0x102e	; 0x102e <ceil>
     676:	0e 94 a5 08 	call	0x114a	; 0x114a <__fixunssfsi>
     67a:	79 8b       	std	Y+17, r23	; 0x11
     67c:	68 8b       	std	Y+16, r22	; 0x10
     67e:	2a c0       	rjmp	.+84     	; 0x6d4 <Delay_s+0x27c>
}
else if (sec <= 0.065536)
     680:	2d eb       	ldi	r18, 0xBD	; 189
     682:	37 e3       	ldi	r19, 0x37	; 55
     684:	46 e8       	ldi	r20, 0x86	; 134
     686:	5d e3       	ldi	r21, 0x3D	; 61
     688:	c7 01       	movw	r24, r14
     68a:	b6 01       	movw	r22, r12
     68c:	0e 94 2e 08 	call	0x105c	; 0x105c <__cmpsf2>
     690:	18 16       	cp	r1, r24
     692:	04 f1       	brlt	.+64     	; 0x6d4 <Delay_s+0x27c>
{
	timer_1_config.timer_prescaler = CPU_clock;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	8f 87       	std	Y+15, r24	; 0x0f
	tick_time = clock_cycle;
     698:	8d 81       	ldd	r24, Y+5	; 0x05
     69a:	9e 81       	ldd	r25, Y+6	; 0x06
     69c:	af 81       	ldd	r26, Y+7	; 0x07
     69e:	b8 85       	ldd	r27, Y+8	; 0x08
     6a0:	89 87       	std	Y+9, r24	; 0x09
     6a2:	9a 87       	std	Y+10, r25	; 0x0a
     6a4:	ab 87       	std	Y+11, r26	; 0x0b
     6a6:	bc 87       	std	Y+12, r27	; 0x0c
	timer_1_config.TCNT_init = ceil(pow(2,16)-(sec/tick_time));
     6a8:	29 85       	ldd	r18, Y+9	; 0x09
     6aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     6ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     6ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     6b0:	c7 01       	movw	r24, r14
     6b2:	b6 01       	movw	r22, r12
     6b4:	0e 94 33 08 	call	0x1066	; 0x1066 <__divsf3>
     6b8:	9b 01       	movw	r18, r22
     6ba:	ac 01       	movw	r20, r24
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	80 e8       	ldi	r24, 0x80	; 128
     6c2:	97 e4       	ldi	r25, 0x47	; 71
     6c4:	0e 94 aa 07 	call	0xf54	; 0xf54 <__subsf3>
     6c8:	0e 94 17 08 	call	0x102e	; 0x102e <ceil>
     6cc:	0e 94 a5 08 	call	0x114a	; 0x114a <__fixunssfsi>
     6d0:	79 8b       	std	Y+17, r23	; 0x11
     6d2:	68 8b       	std	Y+16, r22	; 0x10
}
		uint8_t flag = 0;
     6d4:	1c 8a       	std	Y+20, r1	; 0x14
		if (Timer_init(&timer_1_config) == OK_T)
     6d6:	ce 01       	movw	r24, r28
     6d8:	0d 96       	adiw	r24, 0x0d	; 13
     6da:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <Timer_init>
     6de:	88 23       	and	r24, r24
     6e0:	31 f0       	breq	.+12     	; 0x6ee <Delay_s+0x296>
		Timer1_checkflag(&flag);
		Timer_Deinit(Timer_1);
		return OK_D;
		}
		else
		return DELAY_ERROR;
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	0b c0       	rjmp	.+22     	; 0x6fc <Delay_s+0x2a4>
}
		uint8_t flag = 0;
		if (Timer_init(&timer_1_config) == OK_T)
	{	
		while(flag == 0)
		Timer1_checkflag(&flag);
     6e6:	ce 01       	movw	r24, r28
     6e8:	44 96       	adiw	r24, 0x14	; 20
     6ea:	0e 94 71 06 	call	0xce2	; 0xce2 <Timer1_checkflag>
	timer_1_config.TCNT_init = ceil(pow(2,16)-(sec/tick_time));
}
		uint8_t flag = 0;
		if (Timer_init(&timer_1_config) == OK_T)
	{	
		while(flag == 0)
     6ee:	8c 89       	ldd	r24, Y+20	; 0x14
     6f0:	88 23       	and	r24, r24
     6f2:	c9 f3       	breq	.-14     	; 0x6e6 <Delay_s+0x28e>
		Timer1_checkflag(&flag);
		Timer_Deinit(Timer_1);
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	0e 94 9d 07 	call	0xf3a	; 0xf3a <Timer_Deinit>
		return OK_D;
     6fa:	80 e0       	ldi	r24, 0x00	; 0
		}
		else
		return DELAY_ERROR;
     6fc:	64 96       	adiw	r28, 0x14	; 20
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	ff 90       	pop	r15
     70e:	ef 90       	pop	r14
     710:	df 90       	pop	r13
     712:	cf 90       	pop	r12
     714:	08 95       	ret

00000716 <LED_init>:
 */ 
#include "LED.h"

EN_LED_Error LED_init(uint8_t portname, uint8_t pinnumber)
{
	if(DIO_init(portname,pinnumber,OUT) == OK_DIO) //initializes Pin as output	
     716:	41 e0       	ldi	r20, 0x01	; 1
     718:	0e 94 ae 03 	call	0x75c	; 0x75c <DIO_init>
     71c:	81 11       	cpse	r24, r1
	return OK_L;
	else 
	return DIO_L_Error;
     71e:	81 e0       	ldi	r24, 0x01	; 1
}
     720:	08 95       	ret

00000722 <LED_ON>:
EN_LED_Error LED_ON (uint8_t portname, uint8_t pinnumber)
{
	if (DIO_write(portname,pinnumber,L_HIGH) == OK_DIO) // Turns on LED by writing Logic high 
     722:	41 e0       	ldi	r20, 0x01	; 1
     724:	0e 94 b2 04 	call	0x964	; 0x964 <DIO_write>
     728:	81 11       	cpse	r24, r1
	return OK_L;
	else
	return DIO_L_Error;
     72a:	81 e0       	ldi	r24, 0x01	; 1
}
     72c:	08 95       	ret

0000072e <LED_OFF>:
EN_LED_Error LED_OFF(uint8_t portname, uint8_t pinnumber)
{
	if(DIO_write(portname,pinnumber,L_LOW) == OK_DIO) // turns off LED by writing logic low 
     72e:	40 e0       	ldi	r20, 0x00	; 0
     730:	0e 94 b2 04 	call	0x964	; 0x964 <DIO_write>
     734:	81 11       	cpse	r24, r1
	return OK_L;
	else
	return DIO_L_Error;
     736:	81 e0       	ldi	r24, 0x01	; 1
}
     738:	08 95       	ret

0000073a <LED_Toggle>:

EN_LED_Error LED_Toggle(uint8_t portname, uint8_t pinnumber)
{
	if(DIO_toggle(portname,pinnumber) == OK_DIO) // Led toggles 
     73a:	0e 94 47 05 	call	0xa8e	; 0xa8e <DIO_toggle>
     73e:	81 11       	cpse	r24, r1
	return OK_L;
	else
	return DIO_L_Error;
     740:	81 e0       	ldi	r24, 0x01	; 1
}
     742:	08 95       	ret

00000744 <LED_read>:
EN_LED_Error LED_read(uint8_t portname,uint8_t pinnumber, uint8_t *stateptr)
{
	if(DIO_read(portname,pinnumber,stateptr) == OK_DIO)  // reads the port state (high/low)
     744:	0e 94 43 04 	call	0x886	; 0x886 <DIO_read>
     748:	81 11       	cpse	r24, r1
	return OK_L;
	else
	return DIO_L_Error;
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	08 95       	ret

0000074e <main>:
#include "Application/Application.h"
void timer_test(void);
void ext_int_test(void);
int main(void)
{
	app_init();
     74e:	0e 94 46 00 	call	0x8c	; 0x8c <app_init>
	app_start();
     752:	0e 94 ac 00 	call	0x158	; 0x158 <app_start>
	int_config.ext_int_sense = RISE;
	Ext_INT_init(&int_config);
	set_INT1_callbackptr(ext_int_test);
	while(1);*/

}
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	08 95       	ret

0000075c <DIO_init>:
 */ 
#include "DIO.h"

EN_DIO_Error DIO_init(uint8_t Portname, uint8_t Pinnumber,uint8_t direction )
{
	if (Pinnumber > 8)
     75c:	69 30       	cpi	r22, 0x09	; 9
     75e:	08 f0       	brcs	.+2      	; 0x762 <DIO_init+0x6>
     760:	84 c0       	rjmp	.+264    	; 0x86a <__stack+0xb>
	return DIO_PIN_INVALID;
	if (direction != IN && direction != OUT)
     762:	42 30       	cpi	r20, 0x02	; 2
     764:	08 f0       	brcs	.+2      	; 0x768 <DIO_init+0xc>
     766:	83 c0       	rjmp	.+262    	; 0x86e <__stack+0xf>
	return DIO_Direction_Invalid;
	switch (Portname)
     768:	82 34       	cpi	r24, 0x42	; 66
     76a:	41 f1       	breq	.+80     	; 0x7bc <DIO_init+0x60>
     76c:	18 f4       	brcc	.+6      	; 0x774 <DIO_init+0x18>
     76e:	81 34       	cpi	r24, 0x41	; 65
     770:	41 f0       	breq	.+16     	; 0x782 <DIO_init+0x26>
     772:	7f c0       	rjmp	.+254    	; 0x872 <__stack+0x13>
     774:	83 34       	cpi	r24, 0x43	; 67
     776:	09 f4       	brne	.+2      	; 0x77a <DIO_init+0x1e>
     778:	3e c0       	rjmp	.+124    	; 0x7f6 <DIO_init+0x9a>
     77a:	84 34       	cpi	r24, 0x44	; 68
     77c:	09 f4       	brne	.+2      	; 0x780 <DIO_init+0x24>
     77e:	58 c0       	rjmp	.+176    	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     780:	78 c0       	rjmp	.+240    	; 0x872 <__stack+0x13>
	{
		case PORT_A:
		if (direction == OUT)
     782:	41 30       	cpi	r20, 0x01	; 1
     784:	61 f4       	brne	.+24     	; 0x79e <DIO_init+0x42>
		DDRA |= (1<<Pinnumber);
     786:	2a b3       	in	r18, 0x1a	; 26
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	02 c0       	rjmp	.+4      	; 0x792 <DIO_init+0x36>
     78e:	88 0f       	add	r24, r24
     790:	99 1f       	adc	r25, r25
     792:	6a 95       	dec	r22
     794:	e2 f7       	brpl	.-8      	; 0x78e <DIO_init+0x32>
     796:	82 2b       	or	r24, r18
     798:	8a bb       	out	0x1a, r24	; 26
		default:
		return DIO_PORT_INVALID;
		break;
		
	}
	return OK_DIO;
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	08 95       	ret
	switch (Portname)
	{
		case PORT_A:
		if (direction == OUT)
		DDRA |= (1<<Pinnumber);
		else if (direction == IN) 
     79e:	41 11       	cpse	r20, r1
     7a0:	6a c0       	rjmp	.+212    	; 0x876 <__stack+0x17>
		DDRA &= ~(1<<Pinnumber);
     7a2:	2a b3       	in	r18, 0x1a	; 26
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <DIO_init+0x52>
     7aa:	88 0f       	add	r24, r24
     7ac:	99 1f       	adc	r25, r25
     7ae:	6a 95       	dec	r22
     7b0:	e2 f7       	brpl	.-8      	; 0x7aa <DIO_init+0x4e>
     7b2:	80 95       	com	r24
     7b4:	82 23       	and	r24, r18
     7b6:	8a bb       	out	0x1a, r24	; 26
		default:
		return DIO_PORT_INVALID;
		break;
		
	}
	return OK_DIO;
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	08 95       	ret
		else if (direction == IN) 
		DDRA &= ~(1<<Pinnumber);
		break;
		
		case PORT_B:
		if (direction == OUT)
     7bc:	41 30       	cpi	r20, 0x01	; 1
     7be:	61 f4       	brne	.+24     	; 0x7d8 <DIO_init+0x7c>
		DDRB |= (1<<Pinnumber);
     7c0:	27 b3       	in	r18, 0x17	; 23
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <DIO_init+0x70>
     7c8:	88 0f       	add	r24, r24
     7ca:	99 1f       	adc	r25, r25
     7cc:	6a 95       	dec	r22
     7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <DIO_init+0x6c>
     7d0:	82 2b       	or	r24, r18
     7d2:	87 bb       	out	0x17, r24	; 23
		default:
		return DIO_PORT_INVALID;
		break;
		
	}
	return OK_DIO;
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	08 95       	ret
		break;
		
		case PORT_B:
		if (direction == OUT)
		DDRB |= (1<<Pinnumber);
		else if (direction == IN)
     7d8:	41 11       	cpse	r20, r1
     7da:	4f c0       	rjmp	.+158    	; 0x87a <__stack+0x1b>
		DDRB &= ~(1<<Pinnumber);
     7dc:	27 b3       	in	r18, 0x17	; 23
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <DIO_init+0x8c>
     7e4:	88 0f       	add	r24, r24
     7e6:	99 1f       	adc	r25, r25
     7e8:	6a 95       	dec	r22
     7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <DIO_init+0x88>
     7ec:	80 95       	com	r24
     7ee:	82 23       	and	r24, r18
     7f0:	87 bb       	out	0x17, r24	; 23
		default:
		return DIO_PORT_INVALID;
		break;
		
	}
	return OK_DIO;
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	08 95       	ret
		else if (direction == IN)
		DDRB &= ~(1<<Pinnumber);
		break;
		
		case PORT_C:
		if (direction == OUT)
     7f6:	41 30       	cpi	r20, 0x01	; 1
     7f8:	61 f4       	brne	.+24     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
		DDRC |= (1<<Pinnumber);
     7fa:	24 b3       	in	r18, 0x14	; 20
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	02 c0       	rjmp	.+4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	6a 95       	dec	r22
     808:	e2 f7       	brpl	.-8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     80a:	82 2b       	or	r24, r18
     80c:	84 bb       	out	0x14, r24	; 20
		default:
		return DIO_PORT_INVALID;
		break;
		
	}
	return OK_DIO;
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	08 95       	ret
		break;
		
		case PORT_C:
		if (direction == OUT)
		DDRC |= (1<<Pinnumber);
		else if (direction == OUT)
     812:	41 30       	cpi	r20, 0x01	; 1
     814:	a1 f5       	brne	.+104    	; 0x87e <__stack+0x1f>
		DDRC &= ~(1<<Pinnumber);
     816:	24 b3       	in	r18, 0x14	; 20
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	02 c0       	rjmp	.+4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     81e:	88 0f       	add	r24, r24
     820:	99 1f       	adc	r25, r25
     822:	6a 95       	dec	r22
     824:	e2 f7       	brpl	.-8      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     826:	80 95       	com	r24
     828:	82 23       	and	r24, r18
     82a:	84 bb       	out	0x14, r24	; 20
		default:
		return DIO_PORT_INVALID;
		break;
		
	}
	return OK_DIO;
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	08 95       	ret
		else if (direction == OUT)
		DDRC &= ~(1<<Pinnumber);
		break;
		
		case PORT_D:
		if (direction == OUT)
     830:	41 30       	cpi	r20, 0x01	; 1
     832:	61 f4       	brne	.+24     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
		DDRD |= (1<<Pinnumber);
     834:	21 b3       	in	r18, 0x11	; 17
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	02 c0       	rjmp	.+4      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     83c:	88 0f       	add	r24, r24
     83e:	99 1f       	adc	r25, r25
     840:	6a 95       	dec	r22
     842:	e2 f7       	brpl	.-8      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     844:	82 2b       	or	r24, r18
     846:	81 bb       	out	0x11, r24	; 17
		default:
		return DIO_PORT_INVALID;
		break;
		
	}
	return OK_DIO;
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	08 95       	ret
		break;
		
		case PORT_D:
		if (direction == OUT)
		DDRD |= (1<<Pinnumber);
		else if (direction == IN)
     84c:	41 11       	cpse	r20, r1
     84e:	19 c0       	rjmp	.+50     	; 0x882 <__stack+0x23>
		DDRD &= ~(1<<Pinnumber);
     850:	21 b3       	in	r18, 0x11	; 17
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	02 c0       	rjmp	.+4      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     858:	88 0f       	add	r24, r24
     85a:	99 1f       	adc	r25, r25
     85c:	6a 95       	dec	r22
     85e:	e2 f7       	brpl	.-8      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     860:	80 95       	com	r24
     862:	82 23       	and	r24, r18
     864:	81 bb       	out	0x11, r24	; 17
		default:
		return DIO_PORT_INVALID;
		break;
		
	}
	return OK_DIO;
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	08 95       	ret
#include "DIO.h"

EN_DIO_Error DIO_init(uint8_t Portname, uint8_t Pinnumber,uint8_t direction )
{
	if (Pinnumber > 8)
	return DIO_PIN_INVALID;
     86a:	82 e0       	ldi	r24, 0x02	; 2
     86c:	08 95       	ret
	if (direction != IN && direction != OUT)
	return DIO_Direction_Invalid;
     86e:	83 e0       	ldi	r24, 0x03	; 3
     870:	08 95       	ret
		else if (direction == IN)
		DDRD &= ~(1<<Pinnumber);
		break;
		
		default:
		return DIO_PORT_INVALID;
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	08 95       	ret
		break;
		
	}
	return OK_DIO;
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	08 95       	ret
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	08 95       	ret
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	08 95       	ret
     882:	80 e0       	ldi	r24, 0x00	; 0
}
     884:	08 95       	ret

00000886 <DIO_read>:

EN_DIO_Error DIO_read(uint8_t Portname, uint8_t Pinnumber,uint8_t *value)
{
	if (Pinnumber > 8)
     886:	69 30       	cpi	r22, 0x09	; 9
     888:	08 f0       	brcs	.+2      	; 0x88c <DIO_read+0x6>
     88a:	68 c0       	rjmp	.+208    	; 0x95c <DIO_read+0xd6>
	return DIO_PIN_INVALID;
	
	switch (Portname)
     88c:	82 34       	cpi	r24, 0x42	; 66
     88e:	09 f1       	breq	.+66     	; 0x8d2 <DIO_read+0x4c>
     890:	18 f4       	brcc	.+6      	; 0x898 <DIO_read+0x12>
     892:	81 34       	cpi	r24, 0x41	; 65
     894:	39 f0       	breq	.+14     	; 0x8a4 <DIO_read+0x1e>
     896:	64 c0       	rjmp	.+200    	; 0x960 <DIO_read+0xda>
     898:	83 34       	cpi	r24, 0x43	; 67
     89a:	91 f1       	breq	.+100    	; 0x900 <DIO_read+0x7a>
     89c:	84 34       	cpi	r24, 0x44	; 68
     89e:	09 f4       	brne	.+2      	; 0x8a2 <DIO_read+0x1c>
     8a0:	46 c0       	rjmp	.+140    	; 0x92e <DIO_read+0xa8>
     8a2:	5e c0       	rjmp	.+188    	; 0x960 <DIO_read+0xda>
	{
		case PORT_A:
		*value = (PINA & (1<<Pinnumber))>>Pinnumber;
     8a4:	79 b3       	in	r23, 0x19	; 25
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	9c 01       	movw	r18, r24
     8ac:	06 2e       	mov	r0, r22
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <DIO_read+0x2e>
     8b0:	22 0f       	add	r18, r18
     8b2:	33 1f       	adc	r19, r19
     8b4:	0a 94       	dec	r0
     8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <DIO_read+0x2a>
     8b8:	87 2f       	mov	r24, r23
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	82 23       	and	r24, r18
     8be:	93 23       	and	r25, r19
     8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <DIO_read+0x40>
     8c2:	95 95       	asr	r25
     8c4:	87 95       	ror	r24
     8c6:	6a 95       	dec	r22
     8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <DIO_read+0x3c>
     8ca:	fa 01       	movw	r30, r20
     8cc:	80 83       	st	Z, r24
		
		default:
		return DIO_PORT_INVALID;
		break;
}
return OK_DIO;
     8ce:	80 e0       	ldi	r24, 0x00	; 0
	
	switch (Portname)
	{
		case PORT_A:
		*value = (PINA & (1<<Pinnumber))>>Pinnumber;
		break;
     8d0:	08 95       	ret
		
		case PORT_B:
		*value = (PINB & (1<<Pinnumber))>>Pinnumber;
     8d2:	76 b3       	in	r23, 0x16	; 22
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	9c 01       	movw	r18, r24
     8da:	06 2e       	mov	r0, r22
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <DIO_read+0x5c>
     8de:	22 0f       	add	r18, r18
     8e0:	33 1f       	adc	r19, r19
     8e2:	0a 94       	dec	r0
     8e4:	e2 f7       	brpl	.-8      	; 0x8de <DIO_read+0x58>
     8e6:	87 2f       	mov	r24, r23
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	82 23       	and	r24, r18
     8ec:	93 23       	and	r25, r19
     8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <DIO_read+0x6e>
     8f0:	95 95       	asr	r25
     8f2:	87 95       	ror	r24
     8f4:	6a 95       	dec	r22
     8f6:	e2 f7       	brpl	.-8      	; 0x8f0 <DIO_read+0x6a>
     8f8:	fa 01       	movw	r30, r20
     8fa:	80 83       	st	Z, r24
		
		default:
		return DIO_PORT_INVALID;
		break;
}
return OK_DIO;
     8fc:	80 e0       	ldi	r24, 0x00	; 0
		*value = (PINA & (1<<Pinnumber))>>Pinnumber;
		break;
		
		case PORT_B:
		*value = (PINB & (1<<Pinnumber))>>Pinnumber;
		break;
     8fe:	08 95       	ret
		
		case PORT_C:
		*value = (PINC & (1<<Pinnumber))>>Pinnumber;
     900:	73 b3       	in	r23, 0x13	; 19
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	9c 01       	movw	r18, r24
     908:	06 2e       	mov	r0, r22
     90a:	02 c0       	rjmp	.+4      	; 0x910 <DIO_read+0x8a>
     90c:	22 0f       	add	r18, r18
     90e:	33 1f       	adc	r19, r19
     910:	0a 94       	dec	r0
     912:	e2 f7       	brpl	.-8      	; 0x90c <DIO_read+0x86>
     914:	87 2f       	mov	r24, r23
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	82 23       	and	r24, r18
     91a:	93 23       	and	r25, r19
     91c:	02 c0       	rjmp	.+4      	; 0x922 <DIO_read+0x9c>
     91e:	95 95       	asr	r25
     920:	87 95       	ror	r24
     922:	6a 95       	dec	r22
     924:	e2 f7       	brpl	.-8      	; 0x91e <DIO_read+0x98>
     926:	fa 01       	movw	r30, r20
     928:	80 83       	st	Z, r24
		
		default:
		return DIO_PORT_INVALID;
		break;
}
return OK_DIO;
     92a:	80 e0       	ldi	r24, 0x00	; 0
		*value = (PINB & (1<<Pinnumber))>>Pinnumber;
		break;
		
		case PORT_C:
		*value = (PINC & (1<<Pinnumber))>>Pinnumber;
		break;
     92c:	08 95       	ret
		
		case PORT_D:
		*value = (PIND & (1<<Pinnumber))>>Pinnumber;
     92e:	70 b3       	in	r23, 0x10	; 16
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	9c 01       	movw	r18, r24
     936:	06 2e       	mov	r0, r22
     938:	02 c0       	rjmp	.+4      	; 0x93e <DIO_read+0xb8>
     93a:	22 0f       	add	r18, r18
     93c:	33 1f       	adc	r19, r19
     93e:	0a 94       	dec	r0
     940:	e2 f7       	brpl	.-8      	; 0x93a <DIO_read+0xb4>
     942:	87 2f       	mov	r24, r23
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	82 23       	and	r24, r18
     948:	93 23       	and	r25, r19
     94a:	02 c0       	rjmp	.+4      	; 0x950 <DIO_read+0xca>
     94c:	95 95       	asr	r25
     94e:	87 95       	ror	r24
     950:	6a 95       	dec	r22
     952:	e2 f7       	brpl	.-8      	; 0x94c <DIO_read+0xc6>
     954:	fa 01       	movw	r30, r20
     956:	80 83       	st	Z, r24
		
		default:
		return DIO_PORT_INVALID;
		break;
}
return OK_DIO;
     958:	80 e0       	ldi	r24, 0x00	; 0
		*value = (PINC & (1<<Pinnumber))>>Pinnumber;
		break;
		
		case PORT_D:
		*value = (PIND & (1<<Pinnumber))>>Pinnumber;
		break;
     95a:	08 95       	ret
}

EN_DIO_Error DIO_read(uint8_t Portname, uint8_t Pinnumber,uint8_t *value)
{
	if (Pinnumber > 8)
	return DIO_PIN_INVALID;
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	08 95       	ret
		case PORT_D:
		*value = (PIND & (1<<Pinnumber))>>Pinnumber;
		break;
		
		default:
		return DIO_PORT_INVALID;
     960:	81 e0       	ldi	r24, 0x01	; 1
		break;
}
return OK_DIO;
}
     962:	08 95       	ret

00000964 <DIO_write>:

EN_DIO_Error DIO_write(uint8_t Portname, uint8_t Pinnumber,uint8_t Logic_State )
{
	if (Pinnumber > 8)
     964:	69 30       	cpi	r22, 0x09	; 9
     966:	08 f0       	brcs	.+2      	; 0x96a <DIO_write+0x6>
     968:	84 c0       	rjmp	.+264    	; 0xa72 <DIO_write+0x10e>
	return DIO_PIN_INVALID;
	if (Logic_State != L_HIGH && Logic_State != L_LOW)
     96a:	42 30       	cpi	r20, 0x02	; 2
     96c:	08 f0       	brcs	.+2      	; 0x970 <DIO_write+0xc>
     96e:	83 c0       	rjmp	.+262    	; 0xa76 <DIO_write+0x112>
	return DIO_Direction_Invalid;
	switch(Portname)
     970:	82 34       	cpi	r24, 0x42	; 66
     972:	41 f1       	breq	.+80     	; 0x9c4 <DIO_write+0x60>
     974:	18 f4       	brcc	.+6      	; 0x97c <DIO_write+0x18>
     976:	81 34       	cpi	r24, 0x41	; 65
     978:	41 f0       	breq	.+16     	; 0x98a <DIO_write+0x26>
     97a:	7f c0       	rjmp	.+254    	; 0xa7a <DIO_write+0x116>
     97c:	83 34       	cpi	r24, 0x43	; 67
     97e:	09 f4       	brne	.+2      	; 0x982 <DIO_write+0x1e>
     980:	3e c0       	rjmp	.+124    	; 0x9fe <DIO_write+0x9a>
     982:	84 34       	cpi	r24, 0x44	; 68
     984:	09 f4       	brne	.+2      	; 0x988 <DIO_write+0x24>
     986:	58 c0       	rjmp	.+176    	; 0xa38 <DIO_write+0xd4>
     988:	78 c0       	rjmp	.+240    	; 0xa7a <DIO_write+0x116>
	{
		case PORT_A:
		if (Logic_State == L_HIGH)
     98a:	41 30       	cpi	r20, 0x01	; 1
     98c:	61 f4       	brne	.+24     	; 0x9a6 <DIO_write+0x42>
		PORTA |= (1<<Pinnumber);
     98e:	2b b3       	in	r18, 0x1b	; 27
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	02 c0       	rjmp	.+4      	; 0x99a <DIO_write+0x36>
     996:	88 0f       	add	r24, r24
     998:	99 1f       	adc	r25, r25
     99a:	6a 95       	dec	r22
     99c:	e2 f7       	brpl	.-8      	; 0x996 <DIO_write+0x32>
     99e:	82 2b       	or	r24, r18
     9a0:	8b bb       	out	0x1b, r24	; 27
		
		default:
		return DIO_PORT_INVALID;
		break;
	}
	return OK_DIO;
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	08 95       	ret
	switch(Portname)
	{
		case PORT_A:
		if (Logic_State == L_HIGH)
		PORTA |= (1<<Pinnumber);
		else if(Logic_State == L_LOW)
     9a6:	41 11       	cpse	r20, r1
     9a8:	6a c0       	rjmp	.+212    	; 0xa7e <DIO_write+0x11a>
		PORTA &=~(1<<Pinnumber);
     9aa:	2b b3       	in	r18, 0x1b	; 27
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <DIO_write+0x52>
     9b2:	88 0f       	add	r24, r24
     9b4:	99 1f       	adc	r25, r25
     9b6:	6a 95       	dec	r22
     9b8:	e2 f7       	brpl	.-8      	; 0x9b2 <DIO_write+0x4e>
     9ba:	80 95       	com	r24
     9bc:	82 23       	and	r24, r18
     9be:	8b bb       	out	0x1b, r24	; 27
		
		default:
		return DIO_PORT_INVALID;
		break;
	}
	return OK_DIO;
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	08 95       	ret
		else if(Logic_State == L_LOW)
		PORTA &=~(1<<Pinnumber);
 		break;
		
		case PORT_B:
		if (Logic_State == L_HIGH)
     9c4:	41 30       	cpi	r20, 0x01	; 1
     9c6:	61 f4       	brne	.+24     	; 0x9e0 <DIO_write+0x7c>
		PORTB |= (1<<Pinnumber);
     9c8:	28 b3       	in	r18, 0x18	; 24
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <DIO_write+0x70>
     9d0:	88 0f       	add	r24, r24
     9d2:	99 1f       	adc	r25, r25
     9d4:	6a 95       	dec	r22
     9d6:	e2 f7       	brpl	.-8      	; 0x9d0 <DIO_write+0x6c>
     9d8:	82 2b       	or	r24, r18
     9da:	88 bb       	out	0x18, r24	; 24
		
		default:
		return DIO_PORT_INVALID;
		break;
	}
	return OK_DIO;
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	08 95       	ret
 		break;
		
		case PORT_B:
		if (Logic_State == L_HIGH)
		PORTB |= (1<<Pinnumber);
		else if(Logic_State == L_LOW)
     9e0:	41 11       	cpse	r20, r1
     9e2:	4f c0       	rjmp	.+158    	; 0xa82 <DIO_write+0x11e>
		PORTB &=~(1<<Pinnumber);
     9e4:	28 b3       	in	r18, 0x18	; 24
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <DIO_write+0x8c>
     9ec:	88 0f       	add	r24, r24
     9ee:	99 1f       	adc	r25, r25
     9f0:	6a 95       	dec	r22
     9f2:	e2 f7       	brpl	.-8      	; 0x9ec <DIO_write+0x88>
     9f4:	80 95       	com	r24
     9f6:	82 23       	and	r24, r18
     9f8:	88 bb       	out	0x18, r24	; 24
		
		default:
		return DIO_PORT_INVALID;
		break;
	}
	return OK_DIO;
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	08 95       	ret
		else if(Logic_State == L_LOW)
		PORTB &=~(1<<Pinnumber);
		break;
		
		case PORT_C:
		if (Logic_State == L_HIGH)
     9fe:	41 30       	cpi	r20, 0x01	; 1
     a00:	61 f4       	brne	.+24     	; 0xa1a <DIO_write+0xb6>
		PORTC |= (1<<Pinnumber);
     a02:	25 b3       	in	r18, 0x15	; 21
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <DIO_write+0xaa>
     a0a:	88 0f       	add	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	6a 95       	dec	r22
     a10:	e2 f7       	brpl	.-8      	; 0xa0a <DIO_write+0xa6>
     a12:	82 2b       	or	r24, r18
     a14:	85 bb       	out	0x15, r24	; 21
		
		default:
		return DIO_PORT_INVALID;
		break;
	}
	return OK_DIO;
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	08 95       	ret
		break;
		
		case PORT_C:
		if (Logic_State == L_HIGH)
		PORTC |= (1<<Pinnumber);
		else if(Logic_State == L_LOW)
     a1a:	41 11       	cpse	r20, r1
     a1c:	34 c0       	rjmp	.+104    	; 0xa86 <DIO_write+0x122>
		PORTC &=~(1<<Pinnumber);
     a1e:	25 b3       	in	r18, 0x15	; 21
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <DIO_write+0xc6>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	6a 95       	dec	r22
     a2c:	e2 f7       	brpl	.-8      	; 0xa26 <DIO_write+0xc2>
     a2e:	80 95       	com	r24
     a30:	82 23       	and	r24, r18
     a32:	85 bb       	out	0x15, r24	; 21
		
		default:
		return DIO_PORT_INVALID;
		break;
	}
	return OK_DIO;
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	08 95       	ret
		else if(Logic_State == L_LOW)
		PORTC &=~(1<<Pinnumber);
		break;
		
		case PORT_D:
		if (Logic_State == L_HIGH)
     a38:	41 30       	cpi	r20, 0x01	; 1
     a3a:	61 f4       	brne	.+24     	; 0xa54 <DIO_write+0xf0>
		PORTD |= (1<<Pinnumber);
     a3c:	22 b3       	in	r18, 0x12	; 18
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <DIO_write+0xe4>
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	6a 95       	dec	r22
     a4a:	e2 f7       	brpl	.-8      	; 0xa44 <DIO_write+0xe0>
     a4c:	82 2b       	or	r24, r18
     a4e:	82 bb       	out	0x12, r24	; 18
		
		default:
		return DIO_PORT_INVALID;
		break;
	}
	return OK_DIO;
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	08 95       	ret
		break;
		
		case PORT_D:
		if (Logic_State == L_HIGH)
		PORTD |= (1<<Pinnumber);
		else if(Logic_State == L_LOW)
     a54:	41 11       	cpse	r20, r1
     a56:	19 c0       	rjmp	.+50     	; 0xa8a <DIO_write+0x126>
		PORTD &=~(1<<Pinnumber);
     a58:	22 b3       	in	r18, 0x12	; 18
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <DIO_write+0x100>
     a60:	88 0f       	add	r24, r24
     a62:	99 1f       	adc	r25, r25
     a64:	6a 95       	dec	r22
     a66:	e2 f7       	brpl	.-8      	; 0xa60 <DIO_write+0xfc>
     a68:	80 95       	com	r24
     a6a:	82 23       	and	r24, r18
     a6c:	82 bb       	out	0x12, r24	; 18
		
		default:
		return DIO_PORT_INVALID;
		break;
	}
	return OK_DIO;
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	08 95       	ret
}

EN_DIO_Error DIO_write(uint8_t Portname, uint8_t Pinnumber,uint8_t Logic_State )
{
	if (Pinnumber > 8)
	return DIO_PIN_INVALID;
     a72:	82 e0       	ldi	r24, 0x02	; 2
     a74:	08 95       	ret
	if (Logic_State != L_HIGH && Logic_State != L_LOW)
	return DIO_Direction_Invalid;
     a76:	83 e0       	ldi	r24, 0x03	; 3
     a78:	08 95       	ret
		PORTD &=~(1<<Pinnumber);
		break;
		
		
		default:
		return DIO_PORT_INVALID;
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	08 95       	ret
		break;
	}
	return OK_DIO;
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	08 95       	ret
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	08 95       	ret
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	08 95       	ret
     a8a:	80 e0       	ldi	r24, 0x00	; 0
}
     a8c:	08 95       	ret

00000a8e <DIO_toggle>:


EN_DIO_Error DIO_toggle(uint8_t Portname, uint8_t Pinnumber)
{
	if (Pinnumber > 8)
     a8e:	69 30       	cpi	r22, 0x09	; 9
     a90:	d8 f5       	brcc	.+118    	; 0xb08 <DIO_toggle+0x7a>
	return DIO_PIN_INVALID;
	switch(Portname)
     a92:	82 34       	cpi	r24, 0x42	; 66
     a94:	a9 f0       	breq	.+42     	; 0xac0 <DIO_toggle+0x32>
     a96:	18 f4       	brcc	.+6      	; 0xa9e <DIO_toggle+0x10>
     a98:	81 34       	cpi	r24, 0x41	; 65
     a9a:	31 f0       	breq	.+12     	; 0xaa8 <DIO_toggle+0x1a>
     a9c:	37 c0       	rjmp	.+110    	; 0xb0c <DIO_toggle+0x7e>
     a9e:	83 34       	cpi	r24, 0x43	; 67
     aa0:	d9 f0       	breq	.+54     	; 0xad8 <DIO_toggle+0x4a>
     aa2:	84 34       	cpi	r24, 0x44	; 68
     aa4:	29 f1       	breq	.+74     	; 0xaf0 <DIO_toggle+0x62>
     aa6:	32 c0       	rjmp	.+100    	; 0xb0c <DIO_toggle+0x7e>
	{
	case PORT_A:
	PORTA ^=(1<<Pinnumber);
     aa8:	2b b3       	in	r18, 0x1b	; 27
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <DIO_toggle+0x26>
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	6a 95       	dec	r22
     ab6:	e2 f7       	brpl	.-8      	; 0xab0 <DIO_toggle+0x22>
     ab8:	82 27       	eor	r24, r18
     aba:	8b bb       	out	0x1b, r24	; 27
	
	default:
	return DIO_PORT_INVALID;
	break;
	}
	return OK_DIO;
     abc:	80 e0       	ldi	r24, 0x00	; 0
	return DIO_PIN_INVALID;
	switch(Portname)
	{
	case PORT_A:
	PORTA ^=(1<<Pinnumber);
	break;
     abe:	08 95       	ret
	
	case PORT_B:
	PORTB ^=(1<<Pinnumber);
     ac0:	28 b3       	in	r18, 0x18	; 24
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <DIO_toggle+0x3e>
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	6a 95       	dec	r22
     ace:	e2 f7       	brpl	.-8      	; 0xac8 <DIO_toggle+0x3a>
     ad0:	82 27       	eor	r24, r18
     ad2:	88 bb       	out	0x18, r24	; 24
	
	default:
	return DIO_PORT_INVALID;
	break;
	}
	return OK_DIO;
     ad4:	80 e0       	ldi	r24, 0x00	; 0
	PORTA ^=(1<<Pinnumber);
	break;
	
	case PORT_B:
	PORTB ^=(1<<Pinnumber);
	break;
     ad6:	08 95       	ret
	
	case PORT_C:
	PORTC ^=(1<<Pinnumber);
     ad8:	25 b3       	in	r18, 0x15	; 21
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <DIO_toggle+0x56>
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	6a 95       	dec	r22
     ae6:	e2 f7       	brpl	.-8      	; 0xae0 <DIO_toggle+0x52>
     ae8:	82 27       	eor	r24, r18
     aea:	85 bb       	out	0x15, r24	; 21
	
	default:
	return DIO_PORT_INVALID;
	break;
	}
	return OK_DIO;
     aec:	80 e0       	ldi	r24, 0x00	; 0
	PORTB ^=(1<<Pinnumber);
	break;
	
	case PORT_C:
	PORTC ^=(1<<Pinnumber);
	break;
     aee:	08 95       	ret
	
	case PORT_D:
	PORTD ^=(1<<Pinnumber);
     af0:	22 b3       	in	r18, 0x12	; 18
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	02 c0       	rjmp	.+4      	; 0xafc <DIO_toggle+0x6e>
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	6a 95       	dec	r22
     afe:	e2 f7       	brpl	.-8      	; 0xaf8 <DIO_toggle+0x6a>
     b00:	82 27       	eor	r24, r18
     b02:	82 bb       	out	0x12, r24	; 18
	
	default:
	return DIO_PORT_INVALID;
	break;
	}
	return OK_DIO;
     b04:	80 e0       	ldi	r24, 0x00	; 0
	PORTC ^=(1<<Pinnumber);
	break;
	
	case PORT_D:
	PORTD ^=(1<<Pinnumber);
	break;
     b06:	08 95       	ret


EN_DIO_Error DIO_toggle(uint8_t Portname, uint8_t Pinnumber)
{
	if (Pinnumber > 8)
	return DIO_PIN_INVALID;
     b08:	82 e0       	ldi	r24, 0x02	; 2
     b0a:	08 95       	ret
	case PORT_D:
	PORTD ^=(1<<Pinnumber);
	break;
	
	default:
	return DIO_PORT_INVALID;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
	break;
	}
	return OK_DIO;
     b0e:	08 95       	ret

00000b10 <Ext_INT_init>:
{
	g_I_1_callbackptr = INT_1_callback;
}
void set_INT2_callbackptr(void (*INT_2_callback)(void))
{
	g_I_2_callbackptr = INT_2_callback;
     b10:	fc 01       	movw	r30, r24
     b12:	90 81       	ld	r25, Z
     b14:	91 30       	cpi	r25, 0x01	; 1
     b16:	71 f1       	breq	.+92     	; 0xb74 <Ext_INT_init+0x64>
     b18:	20 f0       	brcs	.+8      	; 0xb22 <Ext_INT_init+0x12>
     b1a:	92 30       	cpi	r25, 0x02	; 2
     b1c:	09 f4       	brne	.+2      	; 0xb20 <Ext_INT_init+0x10>
     b1e:	53 c0       	rjmp	.+166    	; 0xbc6 <Ext_INT_init+0xb6>
     b20:	5a c0       	rjmp	.+180    	; 0xbd6 <Ext_INT_init+0xc6>
     b22:	81 81       	ldd	r24, Z+1	; 0x01
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	69 f0       	breq	.+26     	; 0xb42 <Ext_INT_init+0x32>
     b28:	28 f0       	brcs	.+10     	; 0xb34 <Ext_INT_init+0x24>
     b2a:	82 30       	cpi	r24, 0x02	; 2
     b2c:	89 f0       	breq	.+34     	; 0xb50 <Ext_INT_init+0x40>
     b2e:	83 30       	cpi	r24, 0x03	; 3
     b30:	b1 f0       	breq	.+44     	; 0xb5e <Ext_INT_init+0x4e>
     b32:	53 c0       	rjmp	.+166    	; 0xbda <Ext_INT_init+0xca>
     b34:	85 b7       	in	r24, 0x35	; 53
     b36:	8e 7f       	andi	r24, 0xFE	; 254
     b38:	85 bf       	out	0x35, r24	; 53
     b3a:	85 b7       	in	r24, 0x35	; 53
     b3c:	8d 7f       	andi	r24, 0xFD	; 253
     b3e:	85 bf       	out	0x35, r24	; 53
     b40:	14 c0       	rjmp	.+40     	; 0xb6a <Ext_INT_init+0x5a>
     b42:	85 b7       	in	r24, 0x35	; 53
     b44:	81 60       	ori	r24, 0x01	; 1
     b46:	85 bf       	out	0x35, r24	; 53
     b48:	85 b7       	in	r24, 0x35	; 53
     b4a:	8d 7f       	andi	r24, 0xFD	; 253
     b4c:	85 bf       	out	0x35, r24	; 53
     b4e:	0d c0       	rjmp	.+26     	; 0xb6a <Ext_INT_init+0x5a>
     b50:	85 b7       	in	r24, 0x35	; 53
     b52:	8e 7f       	andi	r24, 0xFE	; 254
     b54:	85 bf       	out	0x35, r24	; 53
     b56:	85 b7       	in	r24, 0x35	; 53
     b58:	82 60       	ori	r24, 0x02	; 2
     b5a:	85 bf       	out	0x35, r24	; 53
     b5c:	06 c0       	rjmp	.+12     	; 0xb6a <Ext_INT_init+0x5a>
     b5e:	85 b7       	in	r24, 0x35	; 53
     b60:	81 60       	ori	r24, 0x01	; 1
     b62:	85 bf       	out	0x35, r24	; 53
     b64:	85 b7       	in	r24, 0x35	; 53
     b66:	82 60       	ori	r24, 0x02	; 2
     b68:	85 bf       	out	0x35, r24	; 53
     b6a:	8b b7       	in	r24, 0x3b	; 59
     b6c:	80 64       	ori	r24, 0x40	; 64
     b6e:	8b bf       	out	0x3b, r24	; 59
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	08 95       	ret
     b74:	81 81       	ldd	r24, Z+1	; 0x01
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	69 f0       	breq	.+26     	; 0xb94 <Ext_INT_init+0x84>
     b7a:	28 f0       	brcs	.+10     	; 0xb86 <Ext_INT_init+0x76>
     b7c:	82 30       	cpi	r24, 0x02	; 2
     b7e:	89 f0       	breq	.+34     	; 0xba2 <Ext_INT_init+0x92>
     b80:	83 30       	cpi	r24, 0x03	; 3
     b82:	b1 f0       	breq	.+44     	; 0xbb0 <Ext_INT_init+0xa0>
     b84:	2c c0       	rjmp	.+88     	; 0xbde <Ext_INT_init+0xce>
     b86:	85 b7       	in	r24, 0x35	; 53
     b88:	8b 7f       	andi	r24, 0xFB	; 251
     b8a:	85 bf       	out	0x35, r24	; 53
     b8c:	85 b7       	in	r24, 0x35	; 53
     b8e:	87 7f       	andi	r24, 0xF7	; 247
     b90:	85 bf       	out	0x35, r24	; 53
     b92:	14 c0       	rjmp	.+40     	; 0xbbc <Ext_INT_init+0xac>
     b94:	85 b7       	in	r24, 0x35	; 53
     b96:	84 60       	ori	r24, 0x04	; 4
     b98:	85 bf       	out	0x35, r24	; 53
     b9a:	85 b7       	in	r24, 0x35	; 53
     b9c:	87 7f       	andi	r24, 0xF7	; 247
     b9e:	85 bf       	out	0x35, r24	; 53
     ba0:	0d c0       	rjmp	.+26     	; 0xbbc <Ext_INT_init+0xac>
     ba2:	85 b7       	in	r24, 0x35	; 53
     ba4:	8b 7f       	andi	r24, 0xFB	; 251
     ba6:	85 bf       	out	0x35, r24	; 53
     ba8:	85 b7       	in	r24, 0x35	; 53
     baa:	88 60       	ori	r24, 0x08	; 8
     bac:	85 bf       	out	0x35, r24	; 53
     bae:	06 c0       	rjmp	.+12     	; 0xbbc <Ext_INT_init+0xac>
     bb0:	85 b7       	in	r24, 0x35	; 53
     bb2:	84 60       	ori	r24, 0x04	; 4
     bb4:	85 bf       	out	0x35, r24	; 53
     bb6:	85 b7       	in	r24, 0x35	; 53
     bb8:	88 60       	ori	r24, 0x08	; 8
     bba:	85 bf       	out	0x35, r24	; 53
     bbc:	8b b7       	in	r24, 0x3b	; 59
     bbe:	80 68       	ori	r24, 0x80	; 128
     bc0:	8b bf       	out	0x3b, r24	; 59
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	08 95       	ret
     bc6:	84 b7       	in	r24, 0x34	; 52
     bc8:	80 64       	ori	r24, 0x40	; 64
     bca:	84 bf       	out	0x34, r24	; 52
     bcc:	8b b7       	in	r24, 0x3b	; 59
     bce:	80 62       	ori	r24, 0x20	; 32
     bd0:	8b bf       	out	0x3b, r24	; 59
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	08 95       	ret
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	08 95       	ret
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	08 95       	ret
     bde:	82 e0       	ldi	r24, 0x02	; 2
     be0:	08 95       	ret

00000be2 <set_INT0_callbackptr>:
     be2:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <g_I_0_callbackptr+0x1>
     be6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <g_I_0_callbackptr>
     bea:	08 95       	ret

00000bec <__vector_1>:
}

ISR(EXT_INT_0)
{
     bec:	1f 92       	push	r1
     bee:	0f 92       	push	r0
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	0f 92       	push	r0
     bf4:	11 24       	eor	r1, r1
     bf6:	2f 93       	push	r18
     bf8:	3f 93       	push	r19
     bfa:	4f 93       	push	r20
     bfc:	5f 93       	push	r21
     bfe:	6f 93       	push	r22
     c00:	7f 93       	push	r23
     c02:	8f 93       	push	r24
     c04:	9f 93       	push	r25
     c06:	af 93       	push	r26
     c08:	bf 93       	push	r27
     c0a:	ef 93       	push	r30
     c0c:	ff 93       	push	r31
	if (g_I_0_callbackptr !=NULL_PTR)
     c0e:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <g_I_0_callbackptr>
     c12:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <g_I_0_callbackptr+0x1>
     c16:	30 97       	sbiw	r30, 0x00	; 0
     c18:	09 f0       	breq	.+2      	; 0xc1c <__vector_1+0x30>
	(*g_I_0_callbackptr)();
     c1a:	09 95       	icall
	
}
     c1c:	ff 91       	pop	r31
     c1e:	ef 91       	pop	r30
     c20:	bf 91       	pop	r27
     c22:	af 91       	pop	r26
     c24:	9f 91       	pop	r25
     c26:	8f 91       	pop	r24
     c28:	7f 91       	pop	r23
     c2a:	6f 91       	pop	r22
     c2c:	5f 91       	pop	r21
     c2e:	4f 91       	pop	r20
     c30:	3f 91       	pop	r19
     c32:	2f 91       	pop	r18
     c34:	0f 90       	pop	r0
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	0f 90       	pop	r0
     c3a:	1f 90       	pop	r1
     c3c:	18 95       	reti

00000c3e <__vector_2>:

ISR(EXT_INT_1)
{
     c3e:	1f 92       	push	r1
     c40:	0f 92       	push	r0
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	0f 92       	push	r0
     c46:	11 24       	eor	r1, r1
     c48:	2f 93       	push	r18
     c4a:	3f 93       	push	r19
     c4c:	4f 93       	push	r20
     c4e:	5f 93       	push	r21
     c50:	6f 93       	push	r22
     c52:	7f 93       	push	r23
     c54:	8f 93       	push	r24
     c56:	9f 93       	push	r25
     c58:	af 93       	push	r26
     c5a:	bf 93       	push	r27
     c5c:	ef 93       	push	r30
     c5e:	ff 93       	push	r31
	if (g_I_1_callbackptr !=NULL_PTR)
     c60:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <g_I_1_callbackptr>
     c64:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <g_I_1_callbackptr+0x1>
     c68:	30 97       	sbiw	r30, 0x00	; 0
     c6a:	09 f0       	breq	.+2      	; 0xc6e <__vector_2+0x30>
	(*g_I_1_callbackptr)(); 
     c6c:	09 95       	icall
	
}
     c6e:	ff 91       	pop	r31
     c70:	ef 91       	pop	r30
     c72:	bf 91       	pop	r27
     c74:	af 91       	pop	r26
     c76:	9f 91       	pop	r25
     c78:	8f 91       	pop	r24
     c7a:	7f 91       	pop	r23
     c7c:	6f 91       	pop	r22
     c7e:	5f 91       	pop	r21
     c80:	4f 91       	pop	r20
     c82:	3f 91       	pop	r19
     c84:	2f 91       	pop	r18
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	0f 90       	pop	r0
     c8c:	1f 90       	pop	r1
     c8e:	18 95       	reti

00000c90 <__vector_3>:

ISR(EXT_INT_2)
{
     c90:	1f 92       	push	r1
     c92:	0f 92       	push	r0
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	0f 92       	push	r0
     c98:	11 24       	eor	r1, r1
     c9a:	2f 93       	push	r18
     c9c:	3f 93       	push	r19
     c9e:	4f 93       	push	r20
     ca0:	5f 93       	push	r21
     ca2:	6f 93       	push	r22
     ca4:	7f 93       	push	r23
     ca6:	8f 93       	push	r24
     ca8:	9f 93       	push	r25
     caa:	af 93       	push	r26
     cac:	bf 93       	push	r27
     cae:	ef 93       	push	r30
     cb0:	ff 93       	push	r31
	if (g_I_2_callbackptr !=NULL_PTR)
     cb2:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     cb6:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     cba:	30 97       	sbiw	r30, 0x00	; 0
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <__vector_3+0x30>
	(*g_I_2_callbackptr)(); 
     cbe:	09 95       	icall
	
}
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	7f 91       	pop	r23
     cce:	6f 91       	pop	r22
     cd0:	5f 91       	pop	r21
     cd2:	4f 91       	pop	r20
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	0f 90       	pop	r0
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	0f 90       	pop	r0
     cde:	1f 90       	pop	r1
     ce0:	18 95       	reti

00000ce2 <Timer1_checkflag>:
void Timer2_checkflag(uint8_t *flag)
{
	if(TIFR & (1<<6))
	*flag = (uint8_t)1;
	else
	*flag = (uint8_t)0;
     ce2:	08 b6       	in	r0, 0x38	; 56
     ce4:	02 fe       	sbrs	r0, 2
     ce6:	04 c0       	rjmp	.+8      	; 0xcf0 <Timer1_checkflag+0xe>
     ce8:	21 e0       	ldi	r18, 0x01	; 1
     cea:	fc 01       	movw	r30, r24
     cec:	20 83       	st	Z, r18
     cee:	08 95       	ret
     cf0:	fc 01       	movw	r30, r24
     cf2:	10 82       	st	Z, r1
     cf4:	08 95       	ret

00000cf6 <Timer_init>:
}
EN_Timer_Error Timer_init(Timer_config_type* configptr)
{
     cf6:	fc 01       	movw	r30, r24
	/*switch_1 case timer number*/
	switch (configptr->timer_num)
     cf8:	80 81       	ld	r24, Z
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	09 f4       	brne	.+2      	; 0xd00 <Timer_init+0xa>
     cfe:	57 c0       	rjmp	.+174    	; 0xdae <Timer_init+0xb8>
     d00:	20 f0       	brcs	.+8      	; 0xd0a <Timer_init+0x14>
     d02:	82 30       	cpi	r24, 0x02	; 2
     d04:	09 f4       	brne	.+2      	; 0xd08 <Timer_init+0x12>
     d06:	b3 c0       	rjmp	.+358    	; 0xe6e <Timer_init+0x178>
     d08:	0a c1       	rjmp	.+532    	; 0xf1e <Timer_init+0x228>
	{
		//case 1 for Timer 0
		case Timer_0:
		//switch_1.1 case for the Timer mode
		switch (configptr->timer_mode)
     d0a:	81 81       	ldd	r24, Z+1	; 0x01
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	51 f0       	breq	.+20     	; 0xd24 <Timer_init+0x2e>
     d10:	28 f0       	brcs	.+10     	; 0xd1c <Timer_init+0x26>
     d12:	82 30       	cpi	r24, 0x02	; 2
     d14:	61 f0       	breq	.+24     	; 0xd2e <Timer_init+0x38>
     d16:	83 30       	cpi	r24, 0x03	; 3
     d18:	79 f0       	breq	.+30     	; 0xd38 <Timer_init+0x42>
     d1a:	03 c1       	rjmp	.+518    	; 0xf22 <Timer_init+0x22c>
		{
			case Overflow:
			TCCR0 &= ~(1<<6); /*clear WGM00*/
     d1c:	83 b7       	in	r24, 0x33	; 51
			TCCR0 &= ~(1<<3); /*clear WGM01*/
     d1e:	87 7b       	andi	r24, 0xB7	; 183
     d20:	83 bf       	out	0x33, r24	; 51
			break;
     d22:	0d c0       	rjmp	.+26     	; 0xd3e <Timer_init+0x48>
			case Compare:
			TCCR0 &= ~(1<<6); /*clear WGM00*/
     d24:	83 b7       	in	r24, 0x33	; 51
     d26:	8f 7b       	andi	r24, 0xBF	; 191
			TCCR0 |= (1<<3); /*set WGM01*/
     d28:	88 60       	ori	r24, 0x08	; 8
     d2a:	83 bf       	out	0x33, r24	; 51
			break;
     d2c:	08 c0       	rjmp	.+16     	; 0xd3e <Timer_init+0x48>
			case FPWM:
			TCCR0 |= (1<<6); /*set WGM00*/
     d2e:	83 b7       	in	r24, 0x33	; 51
     d30:	80 64       	ori	r24, 0x40	; 64
			TCCR0 &= ~(1<<3); /*clear WGM01*/
     d32:	87 7f       	andi	r24, 0xF7	; 247
     d34:	83 bf       	out	0x33, r24	; 51
			break;
     d36:	03 c0       	rjmp	.+6      	; 0xd3e <Timer_init+0x48>
			case PCPWM:
			TCCR0 |= (1<<6); /*set WGM00*/
     d38:	83 b7       	in	r24, 0x33	; 51
			TCCR0 |= (1<<3); /*set WGM01*/
     d3a:	88 64       	ori	r24, 0x48	; 72
     d3c:	83 bf       	out	0x33, r24	; 51
			default:
			return Timer_mode_invalid;
			break;
		}
		//set the initial value for overflow counter in timer 0
		TCNT0 = (uint8_t)configptr->TCNT_init;
     d3e:	83 81       	ldd	r24, Z+3	; 0x03
     d40:	82 bf       	out	0x32, r24	; 50
		//switch case 1.2 to set the Prescaler value
		switch (configptr->timer_prescaler)
     d42:	82 81       	ldd	r24, Z+2	; 0x02
     d44:	82 30       	cpi	r24, 0x02	; 2
     d46:	c9 f0       	breq	.+50     	; 0xd7a <Timer_init+0x84>
     d48:	28 f4       	brcc	.+10     	; 0xd54 <Timer_init+0x5e>
     d4a:	88 23       	and	r24, r24
     d4c:	59 f0       	breq	.+22     	; 0xd64 <Timer_init+0x6e>
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	71 f0       	breq	.+28     	; 0xd6e <Timer_init+0x78>
     d52:	e9 c0       	rjmp	.+466    	; 0xf26 <Timer_init+0x230>
     d54:	86 30       	cpi	r24, 0x06	; 6
     d56:	f1 f0       	breq	.+60     	; 0xd94 <Timer_init+0x9e>
     d58:	87 30       	cpi	r24, 0x07	; 7
     d5a:	11 f1       	breq	.+68     	; 0xda0 <Timer_init+0xaa>
     d5c:	84 30       	cpi	r24, 0x04	; 4
     d5e:	09 f0       	breq	.+2      	; 0xd62 <Timer_init+0x6c>
     d60:	e2 c0       	rjmp	.+452    	; 0xf26 <Timer_init+0x230>
     d62:	12 c0       	rjmp	.+36     	; 0xd88 <Timer_init+0x92>
		{
			case NO_clock:
			TCCR0 &= ~(1<<0); /*clear CS00*/
     d64:	83 b7       	in	r24, 0x33	; 51
			TCCR0 &= ~(1<<1); /*clear CS01*/
			TCCR0 &= ~(1<<2); /*clear CS02*/
     d66:	88 7f       	andi	r24, 0xF8	; 248
     d68:	83 bf       	out	0x33, r24	; 51
			return Timer_clock_invalid;
			break;
		}
		break;
	}
	return OK_T;
     d6a:	80 e0       	ldi	r24, 0x00	; 0
		{
			case NO_clock:
			TCCR0 &= ~(1<<0); /*clear CS00*/
			TCCR0 &= ~(1<<1); /*clear CS01*/
			TCCR0 &= ~(1<<2); /*clear CS02*/
			break;
     d6c:	08 95       	ret
			case CPU_clock:
			TCCR0 |= (1<<0); /*set CS00*/
     d6e:	83 b7       	in	r24, 0x33	; 51
     d70:	81 60       	ori	r24, 0x01	; 1
			TCCR0 &= ~(1<<1); /*clear CS01*/
			TCCR0 &= ~(1<<2); /*clear CS02*/
     d72:	89 7f       	andi	r24, 0xF9	; 249
     d74:	83 bf       	out	0x33, r24	; 51
			return Timer_clock_invalid;
			break;
		}
		break;
	}
	return OK_T;
     d76:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case CPU_clock:
			TCCR0 |= (1<<0); /*set CS00*/
			TCCR0 &= ~(1<<1); /*clear CS01*/
			TCCR0 &= ~(1<<2); /*clear CS02*/
			break;
     d78:	08 95       	ret
			case CPU_8:
			TCCR0 &= ~(1<<0); /*clear CS00*/
     d7a:	83 b7       	in	r24, 0x33	; 51
     d7c:	8e 7f       	andi	r24, 0xFE	; 254
			TCCR0 |= (1<<1); /*set CS01*/
     d7e:	82 60       	ori	r24, 0x02	; 2
			TCCR0 &= ~(1<<2); /*clear CS02*/
     d80:	8b 7f       	andi	r24, 0xFB	; 251
     d82:	83 bf       	out	0x33, r24	; 51
			return Timer_clock_invalid;
			break;
		}
		break;
	}
	return OK_T;
     d84:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case CPU_8:
			TCCR0 &= ~(1<<0); /*clear CS00*/
			TCCR0 |= (1<<1); /*set CS01*/
			TCCR0 &= ~(1<<2); /*clear CS02*/
			break;
     d86:	08 95       	ret
			case CPU_64:
			TCCR0 |= (1<<0); /*set CS00*/
     d88:	83 b7       	in	r24, 0x33	; 51
			TCCR0 |= (1<<1); /*set CS01*/
     d8a:	83 60       	ori	r24, 0x03	; 3
			TCCR0 &= ~(1<<2); /*clear CS02*/
     d8c:	8b 7f       	andi	r24, 0xFB	; 251
     d8e:	83 bf       	out	0x33, r24	; 51
			return Timer_clock_invalid;
			break;
		}
		break;
	}
	return OK_T;
     d90:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case CPU_64:
			TCCR0 |= (1<<0); /*set CS00*/
			TCCR0 |= (1<<1); /*set CS01*/
			TCCR0 &= ~(1<<2); /*clear CS02*/
			break;
     d92:	08 95       	ret
			case CPU_256:
			TCCR0 &= ~(1<<0); /*clear CS00*/
     d94:	83 b7       	in	r24, 0x33	; 51
			TCCR0 &= ~(1<<1); /*clear CS01*/
     d96:	8c 7f       	andi	r24, 0xFC	; 252
			TCCR0 |= (1<<2); /*set CS02*/
     d98:	84 60       	ori	r24, 0x04	; 4
     d9a:	83 bf       	out	0x33, r24	; 51
			return Timer_clock_invalid;
			break;
		}
		break;
	}
	return OK_T;
     d9c:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case CPU_256:
			TCCR0 &= ~(1<<0); /*clear CS00*/
			TCCR0 &= ~(1<<1); /*clear CS01*/
			TCCR0 |= (1<<2); /*set CS02*/
			break;
     d9e:	08 95       	ret
			case CPU_1024:
			TCCR0 |= (1<<0); /*set CS00*/
     da0:	83 b7       	in	r24, 0x33	; 51
     da2:	81 60       	ori	r24, 0x01	; 1
			TCCR0 &= ~(1<<1); /*clear CS01*/
     da4:	8d 7f       	andi	r24, 0xFD	; 253
			TCCR0 |= (1<<2); /*set CS02*/
     da6:	84 60       	ori	r24, 0x04	; 4
     da8:	83 bf       	out	0x33, r24	; 51
			return Timer_clock_invalid;
			break;
		}
		break;
	}
	return OK_T;
     daa:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case CPU_1024:
			TCCR0 |= (1<<0); /*set CS00*/
			TCCR0 &= ~(1<<1); /*clear CS01*/
			TCCR0 |= (1<<2); /*set CS02*/
			break;
     dac:	08 95       	ret
			break;
		}
		break;
		case Timer_1:
		//switch_2.1 case for the Timer mode
		switch (configptr->timer_mode)
     dae:	81 81       	ldd	r24, Z+1	; 0x01
     db0:	81 30       	cpi	r24, 0x01	; 1
     db2:	69 f0       	breq	.+26     	; 0xdce <Timer_init+0xd8>
     db4:	28 f0       	brcs	.+10     	; 0xdc0 <Timer_init+0xca>
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	89 f0       	breq	.+34     	; 0xddc <Timer_init+0xe6>
     dba:	83 30       	cpi	r24, 0x03	; 3
     dbc:	b9 f0       	breq	.+46     	; 0xdec <Timer_init+0xf6>
     dbe:	b5 c0       	rjmp	.+362    	; 0xf2a <Timer_init+0x234>
		{
			case Overflow:
			TCCR1A &= ~(1<<0); /*clear WGM10*/
     dc0:	8f b5       	in	r24, 0x2f	; 47
			TCCR1A &= ~(1<<1); /*clear WGM11*/
     dc2:	8c 7f       	andi	r24, 0xFC	; 252
     dc4:	8f bd       	out	0x2f, r24	; 47
			TCCR1B &= ~(1<<3); /*clear WGM12*/
     dc6:	8e b5       	in	r24, 0x2e	; 46
     dc8:	87 7f       	andi	r24, 0xF7	; 247
     dca:	8e bd       	out	0x2e, r24	; 46
			break ;
     dcc:	16 c0       	rjmp	.+44     	; 0xdfa <Timer_init+0x104>
			case Compare:
			TCCR1A &= ~(1<<0); /*clear WGM10*/
     dce:	8f b5       	in	r24, 0x2f	; 47
			TCCR1A &= ~(1<<1) ;/*clear WGM11*/
     dd0:	8c 7f       	andi	r24, 0xFC	; 252
     dd2:	8f bd       	out	0x2f, r24	; 47
			TCCR1B |= (1<<3); /*SET WGM12*/
     dd4:	8e b5       	in	r24, 0x2e	; 46
     dd6:	88 60       	ori	r24, 0x08	; 8
     dd8:	8e bd       	out	0x2e, r24	; 46
			break;
     dda:	0f c0       	rjmp	.+30     	; 0xdfa <Timer_init+0x104>
			case FPWM:
			TCCR1A |= (1<<0); /*SET WGM10*/
     ddc:	8f b5       	in	r24, 0x2f	; 47
     dde:	81 60       	ori	r24, 0x01	; 1
			TCCR1A &= ~(1<<1); /*clear WGM11*/
     de0:	8d 7f       	andi	r24, 0xFD	; 253
     de2:	8f bd       	out	0x2f, r24	; 47
			TCCR1B |= (1<<3); /*SET WGM12*/
     de4:	8e b5       	in	r24, 0x2e	; 46
     de6:	88 60       	ori	r24, 0x08	; 8
     de8:	8e bd       	out	0x2e, r24	; 46
			break;
     dea:	07 c0       	rjmp	.+14     	; 0xdfa <Timer_init+0x104>
			case PCPWM:
			TCCR1A |= (1<<0) ;/*SET WGM10*/
     dec:	8f b5       	in	r24, 0x2f	; 47
     dee:	81 60       	ori	r24, 0x01	; 1
			TCCR1A &= ~(1<<1) ;/*clear WGM11*/
     df0:	8d 7f       	andi	r24, 0xFD	; 253
     df2:	8f bd       	out	0x2f, r24	; 47
			TCCR1B &= ~(1<<3); /*clear WGM12*/
     df4:	8e b5       	in	r24, 0x2e	; 46
     df6:	87 7f       	andi	r24, 0xF7	; 247
     df8:	8e bd       	out	0x2e, r24	; 46
			default:
			return Timer_mode_invalid;
			break;
		}
		//set the initial value for overflow counter in timer 0
		TCNT1H = (uint8_t)(configptr->TCNT_init >> 8);
     dfa:	84 81       	ldd	r24, Z+4	; 0x04
     dfc:	8d bd       	out	0x2d, r24	; 45
		TCNT1L = (uint8_t)(configptr->TCNT_init);
     dfe:	83 81       	ldd	r24, Z+3	; 0x03
     e00:	8c bd       	out	0x2c, r24	; 44
		//switch case 2.2 to set the Prescaler value
		switch (configptr->timer_prescaler)
     e02:	82 81       	ldd	r24, Z+2	; 0x02
     e04:	82 30       	cpi	r24, 0x02	; 2
     e06:	c9 f0       	breq	.+50     	; 0xe3a <Timer_init+0x144>
     e08:	28 f4       	brcc	.+10     	; 0xe14 <Timer_init+0x11e>
     e0a:	88 23       	and	r24, r24
     e0c:	59 f0       	breq	.+22     	; 0xe24 <Timer_init+0x12e>
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	71 f0       	breq	.+28     	; 0xe2e <Timer_init+0x138>
     e12:	8d c0       	rjmp	.+282    	; 0xf2e <Timer_init+0x238>
     e14:	86 30       	cpi	r24, 0x06	; 6
     e16:	f1 f0       	breq	.+60     	; 0xe54 <Timer_init+0x15e>
     e18:	87 30       	cpi	r24, 0x07	; 7
     e1a:	11 f1       	breq	.+68     	; 0xe60 <Timer_init+0x16a>
     e1c:	84 30       	cpi	r24, 0x04	; 4
     e1e:	09 f0       	breq	.+2      	; 0xe22 <Timer_init+0x12c>
     e20:	86 c0       	rjmp	.+268    	; 0xf2e <Timer_init+0x238>
     e22:	12 c0       	rjmp	.+36     	; 0xe48 <Timer_init+0x152>
		{
			case NO_clock:
			TCCR1B &= ~(1<<0); /*clear CS10*/
     e24:	8e b5       	in	r24, 0x2e	; 46
			TCCR1B &= ~(1<<1); /*clear CS11*/
			TCCR1B &= ~(1<<2); /*clear CS12*/
     e26:	88 7f       	andi	r24, 0xF8	; 248
     e28:	8e bd       	out	0x2e, r24	; 46
			return Timer_clock_invalid;
			break;
		}
		break;
	}
	return OK_T;
     e2a:	80 e0       	ldi	r24, 0x00	; 0
		{
			case NO_clock:
			TCCR1B &= ~(1<<0); /*clear CS10*/
			TCCR1B &= ~(1<<1); /*clear CS11*/
			TCCR1B &= ~(1<<2); /*clear CS12*/
			break;
     e2c:	08 95       	ret
			case CPU_clock:
			TCCR1B |= (1<<0); /*set CS10*/
     e2e:	8e b5       	in	r24, 0x2e	; 46
     e30:	81 60       	ori	r24, 0x01	; 1
			TCCR1B &= ~(1<<1); /*clear CS11*/
			TCCR1B &= ~(1<<2); /*clear CS12*/
     e32:	89 7f       	andi	r24, 0xF9	; 249
     e34:	8e bd       	out	0x2e, r24	; 46
			return Timer_clock_invalid;
			break;
		}
		break;
	}
	return OK_T;
     e36:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case CPU_clock:
			TCCR1B |= (1<<0); /*set CS10*/
			TCCR1B &= ~(1<<1); /*clear CS11*/
			TCCR1B &= ~(1<<2); /*clear CS12*/
			break;
     e38:	08 95       	ret
			case CPU_8:
			TCCR1B &= ~(1<<0); /*clear CS10*/
     e3a:	8e b5       	in	r24, 0x2e	; 46
     e3c:	8e 7f       	andi	r24, 0xFE	; 254
			TCCR1B |= (1<<1); /*set CS11*/
     e3e:	82 60       	ori	r24, 0x02	; 2
			TCCR1B &= ~(1<<2); /*clear CS12*/
     e40:	8b 7f       	andi	r24, 0xFB	; 251
     e42:	8e bd       	out	0x2e, r24	; 46
			return Timer_clock_invalid;
			break;
		}
		break;
	}
	return OK_T;
     e44:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case CPU_8:
			TCCR1B &= ~(1<<0); /*clear CS10*/
			TCCR1B |= (1<<1); /*set CS11*/
			TCCR1B &= ~(1<<2); /*clear CS12*/
			break;
     e46:	08 95       	ret
			case CPU_64:
			TCCR1B |= (1<<0); /*set CS10*/
     e48:	8e b5       	in	r24, 0x2e	; 46
			TCCR1B |= (1<<1); /*set CS11*/
     e4a:	83 60       	ori	r24, 0x03	; 3
			TCCR1B &= ~(1<<2); /*clear CS12*/
     e4c:	8b 7f       	andi	r24, 0xFB	; 251
     e4e:	8e bd       	out	0x2e, r24	; 46
			return Timer_clock_invalid;
			break;
		}
		break;
	}
	return OK_T;
     e50:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case CPU_64:
			TCCR1B |= (1<<0); /*set CS10*/
			TCCR1B |= (1<<1); /*set CS11*/
			TCCR1B &= ~(1<<2); /*clear CS12*/
			break;
     e52:	08 95       	ret
			case CPU_256:
			TCCR1B &= ~(1<<0); /*clear CS10*/
     e54:	8e b5       	in	r24, 0x2e	; 46
			TCCR1B &= ~(1<<1); /*clear CS11*/
     e56:	8c 7f       	andi	r24, 0xFC	; 252
			TCCR1B |= (1<<2); /*set CS12*/
     e58:	84 60       	ori	r24, 0x04	; 4
     e5a:	8e bd       	out	0x2e, r24	; 46
			return Timer_clock_invalid;
			break;
		}
		break;
	}
	return OK_T;
     e5c:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case CPU_256:
			TCCR1B &= ~(1<<0); /*clear CS10*/
			TCCR1B &= ~(1<<1); /*clear CS11*/
			TCCR1B |= (1<<2); /*set CS12*/
			break;
     e5e:	08 95       	ret
			case CPU_1024:
			TCCR1B |= (1<<0); /*set CS10*/
     e60:	8e b5       	in	r24, 0x2e	; 46
     e62:	81 60       	ori	r24, 0x01	; 1
			TCCR1B &= ~(1<<1); /*clear CS11*/
     e64:	8d 7f       	andi	r24, 0xFD	; 253
			TCCR1B |= (1<<2); /*set CS12*/
     e66:	84 60       	ori	r24, 0x04	; 4
     e68:	8e bd       	out	0x2e, r24	; 46
			return Timer_clock_invalid;
			break;
		}
		break;
	}
	return OK_T;
     e6a:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case CPU_1024:
			TCCR1B |= (1<<0); /*set CS10*/
			TCCR1B &= ~(1<<1); /*clear CS11*/
			TCCR1B |= (1<<2); /*set CS12*/
			break;
     e6c:	08 95       	ret
			break;
		}
		break;
		case Timer_2:
		//switch_1.3 case for the Timer mode
		switch (configptr->timer_mode)
     e6e:	81 81       	ldd	r24, Z+1	; 0x01
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	51 f0       	breq	.+20     	; 0xe88 <Timer_init+0x192>
     e74:	28 f0       	brcs	.+10     	; 0xe80 <Timer_init+0x18a>
     e76:	82 30       	cpi	r24, 0x02	; 2
     e78:	61 f0       	breq	.+24     	; 0xe92 <Timer_init+0x19c>
     e7a:	83 30       	cpi	r24, 0x03	; 3
     e7c:	79 f0       	breq	.+30     	; 0xe9c <Timer_init+0x1a6>
     e7e:	59 c0       	rjmp	.+178    	; 0xf32 <Timer_init+0x23c>
		{
			case Overflow:
			TCCR2 &= ~(1<<6); /*clear WGM20*/
     e80:	85 b5       	in	r24, 0x25	; 37
			TCCR2 &= ~(1<<3); /*clear WGM21*/
     e82:	87 7b       	andi	r24, 0xB7	; 183
     e84:	85 bd       	out	0x25, r24	; 37
			break;
     e86:	0d c0       	rjmp	.+26     	; 0xea2 <Timer_init+0x1ac>
			case Compare:
			TCCR2 &= ~(1<<6); /*clear WGM20*/
     e88:	85 b5       	in	r24, 0x25	; 37
     e8a:	8f 7b       	andi	r24, 0xBF	; 191
			TCCR2 |= (1<<3); /*set WGM21*/
     e8c:	88 60       	ori	r24, 0x08	; 8
     e8e:	85 bd       	out	0x25, r24	; 37
			break;
     e90:	08 c0       	rjmp	.+16     	; 0xea2 <Timer_init+0x1ac>
			case FPWM:
			TCCR2 |= (1<<6); /*set WGM20*/	
     e92:	85 b5       	in	r24, 0x25	; 37
     e94:	80 64       	ori	r24, 0x40	; 64
			TCCR2 &= ~(1<<3); /*clear WGM21*/
     e96:	87 7f       	andi	r24, 0xF7	; 247
     e98:	85 bd       	out	0x25, r24	; 37
			break;
     e9a:	03 c0       	rjmp	.+6      	; 0xea2 <Timer_init+0x1ac>
			case PCPWM:
			TCCR2 |= (1<<6); /*set WGM20*/
     e9c:	85 b5       	in	r24, 0x25	; 37
			TCCR2 |= (1<<3); /*set WGM21*/
     e9e:	88 64       	ori	r24, 0x48	; 72
     ea0:	85 bd       	out	0x25, r24	; 37
			default:
			return Timer_mode_invalid;
			break;
		}
		//set the initial value for overflow counter in timer 2
		TCNT2 = (uint8_t)configptr->TCNT_init;
     ea2:	83 81       	ldd	r24, Z+3	; 0x03
     ea4:	84 bd       	out	0x24, r24	; 36
		//switch case 1.3 to set the Prescaler value
		switch (configptr->timer_prescaler)
     ea6:	e2 81       	ldd	r30, Z+2	; 0x02
     ea8:	8e 2f       	mov	r24, r30
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	88 30       	cpi	r24, 0x08	; 8
     eae:	91 05       	cpc	r25, r1
     eb0:	08 f0       	brcs	.+2      	; 0xeb4 <Timer_init+0x1be>
     eb2:	41 c0       	rjmp	.+130    	; 0xf36 <Timer_init+0x240>
     eb4:	fc 01       	movw	r30, r24
     eb6:	e6 5d       	subi	r30, 0xD6	; 214
     eb8:	ff 4f       	sbci	r31, 0xFF	; 255
     eba:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__tablejump2__>
		{
			case NO_clock:
			TCCR2 &= ~(1<<0); /*clear CS20*/
     ebe:	85 b5       	in	r24, 0x25	; 37
			TCCR2 &= ~(1<<1); /*clear CS21*/
			TCCR2 &= ~(1<<2); /*clear CS22*/
     ec0:	88 7f       	andi	r24, 0xF8	; 248
     ec2:	85 bd       	out	0x25, r24	; 37
			return Timer_clock_invalid;
			break;
		}
		break;
	}
	return OK_T;
     ec4:	80 e0       	ldi	r24, 0x00	; 0
		{
			case NO_clock:
			TCCR2 &= ~(1<<0); /*clear CS20*/
			TCCR2 &= ~(1<<1); /*clear CS21*/
			TCCR2 &= ~(1<<2); /*clear CS22*/
			break;
     ec6:	08 95       	ret
			case CPU_clock:
			TCCR2 |= (1<<0); /*set CS20*/
     ec8:	85 b5       	in	r24, 0x25	; 37
     eca:	81 60       	ori	r24, 0x01	; 1
			TCCR2 &= ~(1<<1); /*clear CS21*/
			TCCR2 &= ~(1<<2); /*clear CS22*/
     ecc:	89 7f       	andi	r24, 0xF9	; 249
     ece:	85 bd       	out	0x25, r24	; 37
			return Timer_clock_invalid;
			break;
		}
		break;
	}
	return OK_T;
     ed0:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case CPU_clock:
			TCCR2 |= (1<<0); /*set CS20*/
			TCCR2 &= ~(1<<1); /*clear CS21*/
			TCCR2 &= ~(1<<2); /*clear CS22*/
			break;
     ed2:	08 95       	ret
			case CPU_8:
			TCCR2 &= ~(1<<0); /*clear CS20*/
     ed4:	85 b5       	in	r24, 0x25	; 37
     ed6:	8e 7f       	andi	r24, 0xFE	; 254
			TCCR2 |= (1<<1); /*set CS21*/
     ed8:	82 60       	ori	r24, 0x02	; 2
			TCCR2 &= ~(1<<2); /*clear CS22*/
     eda:	8b 7f       	andi	r24, 0xFB	; 251
     edc:	85 bd       	out	0x25, r24	; 37
			return Timer_clock_invalid;
			break;
		}
		break;
	}
	return OK_T;
     ede:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case CPU_8:
			TCCR2 &= ~(1<<0); /*clear CS20*/
			TCCR2 |= (1<<1); /*set CS21*/
			TCCR2 &= ~(1<<2); /*clear CS22*/
			break;
     ee0:	08 95       	ret
			case CPU_32:
			TCCR2 |= (1<<0); /*set CS20*/
     ee2:	85 b5       	in	r24, 0x25	; 37
			TCCR2 |= (1<<1); /*set CS21*/
     ee4:	83 60       	ori	r24, 0x03	; 3
			TCCR2 &= ~(1<<2); /*clear CS22*/
     ee6:	8b 7f       	andi	r24, 0xFB	; 251
     ee8:	85 bd       	out	0x25, r24	; 37
			return Timer_clock_invalid;
			break;
		}
		break;
	}
	return OK_T;
     eea:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case CPU_32:
			TCCR2 |= (1<<0); /*set CS20*/
			TCCR2 |= (1<<1); /*set CS21*/
			TCCR2 &= ~(1<<2); /*clear CS22*/
			break;
     eec:	08 95       	ret
			case CPU_64:
			TCCR2 &= ~(1<<0); /*clear CS20*/
     eee:	85 b5       	in	r24, 0x25	; 37
			TCCR2 &= ~(1<<1); /*clear CS21*/
     ef0:	8c 7f       	andi	r24, 0xFC	; 252
			TCCR2 |= (1<<2); /*set CS22*/
     ef2:	84 60       	ori	r24, 0x04	; 4
     ef4:	85 bd       	out	0x25, r24	; 37
			return Timer_clock_invalid;
			break;
		}
		break;
	}
	return OK_T;
     ef6:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case CPU_64:
			TCCR2 &= ~(1<<0); /*clear CS20*/
			TCCR2 &= ~(1<<1); /*clear CS21*/
			TCCR2 |= (1<<2); /*set CS22*/
			break;
     ef8:	08 95       	ret
			case CPU_128:
			TCCR2 |= (1<<0); /*set CS20*/
     efa:	85 b5       	in	r24, 0x25	; 37
     efc:	81 60       	ori	r24, 0x01	; 1
			TCCR2 &= ~(1<<1); /*clear CS21*/
     efe:	8d 7f       	andi	r24, 0xFD	; 253
			TCCR2 |= (1<<2); /*set CS22*/
     f00:	84 60       	ori	r24, 0x04	; 4
     f02:	85 bd       	out	0x25, r24	; 37
			return Timer_clock_invalid;
			break;
		}
		break;
	}
	return OK_T;
     f04:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case CPU_128:
			TCCR2 |= (1<<0); /*set CS20*/
			TCCR2 &= ~(1<<1); /*clear CS21*/
			TCCR2 |= (1<<2); /*set CS22*/
			break;
     f06:	08 95       	ret
			case CPU_256:
			TCCR2 &= ~(1<<0); /*clear CS20*/
     f08:	85 b5       	in	r24, 0x25	; 37
     f0a:	8e 7f       	andi	r24, 0xFE	; 254
			TCCR2 |= (1<<1); /*set CS21*/
			TCCR2 |= (1<<2); /*set CS02*/
     f0c:	86 60       	ori	r24, 0x06	; 6
     f0e:	85 bd       	out	0x25, r24	; 37
			return Timer_clock_invalid;
			break;
		}
		break;
	}
	return OK_T;
     f10:	80 e0       	ldi	r24, 0x00	; 0
			break;
			case CPU_256:
			TCCR2 &= ~(1<<0); /*clear CS20*/
			TCCR2 |= (1<<1); /*set CS21*/
			TCCR2 |= (1<<2); /*set CS02*/
			break;
     f12:	08 95       	ret
			case CPU_1024:
			TCCR2 |= (1<<0); /*set CS20*/
     f14:	85 b5       	in	r24, 0x25	; 37
			TCCR2 |= (1<<1); /*set CS21*/
			TCCR2 |= (1<<2); /*set CS22*/
     f16:	87 60       	ori	r24, 0x07	; 7
     f18:	85 bd       	out	0x25, r24	; 37
			default:
			return Timer_clock_invalid;
     f1a:	83 e0       	ldi	r24, 0x03	; 3
     f1c:	08 95       	ret
			break;
		}
		break;
	}
	return OK_T;
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	08 95       	ret
			TCCR0 |= (1<<6); /*set WGM00*/
			TCCR0 |= (1<<3); /*set WGM01*/
			break;
			/*in case the user entered another mode that is not available */
			default:
			return Timer_mode_invalid;
     f22:	82 e0       	ldi	r24, 0x02	; 2
     f24:	08 95       	ret
			TCCR0 &= ~(1<<1); /*clear CS01*/
			TCCR0 |= (1<<2); /*set CS02*/
			break;
			
			default:
			return Timer_clock_invalid;
     f26:	83 e0       	ldi	r24, 0x03	; 3
     f28:	08 95       	ret
			TCCR1A &= ~(1<<1) ;/*clear WGM11*/
			TCCR1B &= ~(1<<3); /*clear WGM12*/
			break;
			/*in case the user entered another mode that is not available */
			default:
			return Timer_mode_invalid;
     f2a:	82 e0       	ldi	r24, 0x02	; 2
     f2c:	08 95       	ret
			TCCR1B &= ~(1<<1); /*clear CS11*/
			TCCR1B |= (1<<2); /*set CS12*/
			break;
			
			default:
			return Timer_clock_invalid;
     f2e:	83 e0       	ldi	r24, 0x03	; 3
     f30:	08 95       	ret
			TCCR2 |= (1<<6); /*set WGM20*/
			TCCR2 |= (1<<3); /*set WGM21*/
			break;
			/*in case the user entered another mode that is not available */
			default:
			return Timer_mode_invalid;
     f32:	82 e0       	ldi	r24, 0x02	; 2
     f34:	08 95       	ret
			case CPU_1024:
			TCCR2 |= (1<<0); /*set CS20*/
			TCCR2 |= (1<<1); /*set CS21*/
			TCCR2 |= (1<<2); /*set CS22*/
			default:
			return Timer_clock_invalid;
     f36:	83 e0       	ldi	r24, 0x03	; 3
			break;
		}
		break;
	}
	return OK_T;
}
     f38:	08 95       	ret

00000f3a <Timer_Deinit>:
void Timer_Deinit(Timer_num timer_NUM)
{
	if (timer_NUM == Timer_0)
     f3a:	81 11       	cpse	r24, r1
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <Timer_Deinit+0x8>
	TCCR0 = 0;
     f3e:	13 be       	out	0x33, r1	; 51
     f40:	08 95       	ret
	else if (timer_NUM== Timer_1)
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	19 f4       	brne	.+6      	; 0xf4c <Timer_Deinit+0x12>
	{
		TCCR1A = 0;
     f46:	1f bc       	out	0x2f, r1	; 47
		TCCR1B = 0;
     f48:	1e bc       	out	0x2e, r1	; 46
     f4a:	08 95       	ret
	}
	else if (timer_NUM == Timer_2)
     f4c:	82 30       	cpi	r24, 0x02	; 2
     f4e:	09 f4       	brne	.+2      	; 0xf52 <Timer_Deinit+0x18>
	TCCR2 = 0;
     f50:	15 bc       	out	0x25, r1	; 37
     f52:	08 95       	ret

00000f54 <__subsf3>:
     f54:	50 58       	subi	r21, 0x80	; 128

00000f56 <__addsf3>:
     f56:	bb 27       	eor	r27, r27
     f58:	aa 27       	eor	r26, r26
     f5a:	0e 94 c2 07 	call	0xf84	; 0xf84 <__addsf3x>
     f5e:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__fp_round>
     f62:	0e 94 67 09 	call	0x12ce	; 0x12ce <__fp_pscA>
     f66:	38 f0       	brcs	.+14     	; 0xf76 <__addsf3+0x20>
     f68:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__fp_pscB>
     f6c:	20 f0       	brcs	.+8      	; 0xf76 <__addsf3+0x20>
     f6e:	39 f4       	brne	.+14     	; 0xf7e <__addsf3+0x28>
     f70:	9f 3f       	cpi	r25, 0xFF	; 255
     f72:	19 f4       	brne	.+6      	; 0xf7a <__addsf3+0x24>
     f74:	26 f4       	brtc	.+8      	; 0xf7e <__addsf3+0x28>
     f76:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_nan>
     f7a:	0e f4       	brtc	.+2      	; 0xf7e <__addsf3+0x28>
     f7c:	e0 95       	com	r30
     f7e:	e7 fb       	bst	r30, 7
     f80:	0c 94 35 09 	jmp	0x126a	; 0x126a <__fp_inf>

00000f84 <__addsf3x>:
     f84:	e9 2f       	mov	r30, r25
     f86:	0e 94 86 09 	call	0x130c	; 0x130c <__fp_split3>
     f8a:	58 f3       	brcs	.-42     	; 0xf62 <__addsf3+0xc>
     f8c:	ba 17       	cp	r27, r26
     f8e:	62 07       	cpc	r22, r18
     f90:	73 07       	cpc	r23, r19
     f92:	84 07       	cpc	r24, r20
     f94:	95 07       	cpc	r25, r21
     f96:	20 f0       	brcs	.+8      	; 0xfa0 <__addsf3x+0x1c>
     f98:	79 f4       	brne	.+30     	; 0xfb8 <__addsf3x+0x34>
     f9a:	a6 f5       	brtc	.+104    	; 0x1004 <__addsf3x+0x80>
     f9c:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__fp_zero>
     fa0:	0e f4       	brtc	.+2      	; 0xfa4 <__addsf3x+0x20>
     fa2:	e0 95       	com	r30
     fa4:	0b 2e       	mov	r0, r27
     fa6:	ba 2f       	mov	r27, r26
     fa8:	a0 2d       	mov	r26, r0
     faa:	0b 01       	movw	r0, r22
     fac:	b9 01       	movw	r22, r18
     fae:	90 01       	movw	r18, r0
     fb0:	0c 01       	movw	r0, r24
     fb2:	ca 01       	movw	r24, r20
     fb4:	a0 01       	movw	r20, r0
     fb6:	11 24       	eor	r1, r1
     fb8:	ff 27       	eor	r31, r31
     fba:	59 1b       	sub	r21, r25
     fbc:	99 f0       	breq	.+38     	; 0xfe4 <__addsf3x+0x60>
     fbe:	59 3f       	cpi	r21, 0xF9	; 249
     fc0:	50 f4       	brcc	.+20     	; 0xfd6 <__addsf3x+0x52>
     fc2:	50 3e       	cpi	r21, 0xE0	; 224
     fc4:	68 f1       	brcs	.+90     	; 0x1020 <__addsf3x+0x9c>
     fc6:	1a 16       	cp	r1, r26
     fc8:	f0 40       	sbci	r31, 0x00	; 0
     fca:	a2 2f       	mov	r26, r18
     fcc:	23 2f       	mov	r18, r19
     fce:	34 2f       	mov	r19, r20
     fd0:	44 27       	eor	r20, r20
     fd2:	58 5f       	subi	r21, 0xF8	; 248
     fd4:	f3 cf       	rjmp	.-26     	; 0xfbc <__addsf3x+0x38>
     fd6:	46 95       	lsr	r20
     fd8:	37 95       	ror	r19
     fda:	27 95       	ror	r18
     fdc:	a7 95       	ror	r26
     fde:	f0 40       	sbci	r31, 0x00	; 0
     fe0:	53 95       	inc	r21
     fe2:	c9 f7       	brne	.-14     	; 0xfd6 <__addsf3x+0x52>
     fe4:	7e f4       	brtc	.+30     	; 0x1004 <__addsf3x+0x80>
     fe6:	1f 16       	cp	r1, r31
     fe8:	ba 0b       	sbc	r27, r26
     fea:	62 0b       	sbc	r22, r18
     fec:	73 0b       	sbc	r23, r19
     fee:	84 0b       	sbc	r24, r20
     ff0:	ba f0       	brmi	.+46     	; 0x1020 <__addsf3x+0x9c>
     ff2:	91 50       	subi	r25, 0x01	; 1
     ff4:	a1 f0       	breq	.+40     	; 0x101e <__addsf3x+0x9a>
     ff6:	ff 0f       	add	r31, r31
     ff8:	bb 1f       	adc	r27, r27
     ffa:	66 1f       	adc	r22, r22
     ffc:	77 1f       	adc	r23, r23
     ffe:	88 1f       	adc	r24, r24
    1000:	c2 f7       	brpl	.-16     	; 0xff2 <__addsf3x+0x6e>
    1002:	0e c0       	rjmp	.+28     	; 0x1020 <__addsf3x+0x9c>
    1004:	ba 0f       	add	r27, r26
    1006:	62 1f       	adc	r22, r18
    1008:	73 1f       	adc	r23, r19
    100a:	84 1f       	adc	r24, r20
    100c:	48 f4       	brcc	.+18     	; 0x1020 <__addsf3x+0x9c>
    100e:	87 95       	ror	r24
    1010:	77 95       	ror	r23
    1012:	67 95       	ror	r22
    1014:	b7 95       	ror	r27
    1016:	f7 95       	ror	r31
    1018:	9e 3f       	cpi	r25, 0xFE	; 254
    101a:	08 f0       	brcs	.+2      	; 0x101e <__addsf3x+0x9a>
    101c:	b0 cf       	rjmp	.-160    	; 0xf7e <__addsf3+0x28>
    101e:	93 95       	inc	r25
    1020:	88 0f       	add	r24, r24
    1022:	08 f0       	brcs	.+2      	; 0x1026 <__addsf3x+0xa2>
    1024:	99 27       	eor	r25, r25
    1026:	ee 0f       	add	r30, r30
    1028:	97 95       	ror	r25
    102a:	87 95       	ror	r24
    102c:	08 95       	ret

0000102e <ceil>:
    102e:	0e 94 a8 09 	call	0x1350	; 0x1350 <__fp_trunc>
    1032:	90 f0       	brcs	.+36     	; 0x1058 <ceil+0x2a>
    1034:	9f 37       	cpi	r25, 0x7F	; 127
    1036:	48 f4       	brcc	.+18     	; 0x104a <ceil+0x1c>
    1038:	91 11       	cpse	r25, r1
    103a:	16 f4       	brtc	.+4      	; 0x1040 <ceil+0x12>
    103c:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__fp_szero>
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	80 e8       	ldi	r24, 0x80	; 128
    1046:	9f e3       	ldi	r25, 0x3F	; 63
    1048:	08 95       	ret
    104a:	26 f0       	brts	.+8      	; 0x1054 <ceil+0x26>
    104c:	1b 16       	cp	r1, r27
    104e:	61 1d       	adc	r22, r1
    1050:	71 1d       	adc	r23, r1
    1052:	81 1d       	adc	r24, r1
    1054:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__fp_mintl>
    1058:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__fp_mpack>

0000105c <__cmpsf2>:
    105c:	0e 94 11 09 	call	0x1222	; 0x1222 <__fp_cmp>
    1060:	08 f4       	brcc	.+2      	; 0x1064 <__cmpsf2+0x8>
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	08 95       	ret

00001066 <__divsf3>:
    1066:	0e 94 47 08 	call	0x108e	; 0x108e <__divsf3x>
    106a:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__fp_round>
    106e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__fp_pscB>
    1072:	58 f0       	brcs	.+22     	; 0x108a <__divsf3+0x24>
    1074:	0e 94 67 09 	call	0x12ce	; 0x12ce <__fp_pscA>
    1078:	40 f0       	brcs	.+16     	; 0x108a <__divsf3+0x24>
    107a:	29 f4       	brne	.+10     	; 0x1086 <__divsf3+0x20>
    107c:	5f 3f       	cpi	r21, 0xFF	; 255
    107e:	29 f0       	breq	.+10     	; 0x108a <__divsf3+0x24>
    1080:	0c 94 35 09 	jmp	0x126a	; 0x126a <__fp_inf>
    1084:	51 11       	cpse	r21, r1
    1086:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__fp_szero>
    108a:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_nan>

0000108e <__divsf3x>:
    108e:	0e 94 86 09 	call	0x130c	; 0x130c <__fp_split3>
    1092:	68 f3       	brcs	.-38     	; 0x106e <__divsf3+0x8>

00001094 <__divsf3_pse>:
    1094:	99 23       	and	r25, r25
    1096:	b1 f3       	breq	.-20     	; 0x1084 <__divsf3+0x1e>
    1098:	55 23       	and	r21, r21
    109a:	91 f3       	breq	.-28     	; 0x1080 <__divsf3+0x1a>
    109c:	95 1b       	sub	r25, r21
    109e:	55 0b       	sbc	r21, r21
    10a0:	bb 27       	eor	r27, r27
    10a2:	aa 27       	eor	r26, r26
    10a4:	62 17       	cp	r22, r18
    10a6:	73 07       	cpc	r23, r19
    10a8:	84 07       	cpc	r24, r20
    10aa:	38 f0       	brcs	.+14     	; 0x10ba <__divsf3_pse+0x26>
    10ac:	9f 5f       	subi	r25, 0xFF	; 255
    10ae:	5f 4f       	sbci	r21, 0xFF	; 255
    10b0:	22 0f       	add	r18, r18
    10b2:	33 1f       	adc	r19, r19
    10b4:	44 1f       	adc	r20, r20
    10b6:	aa 1f       	adc	r26, r26
    10b8:	a9 f3       	breq	.-22     	; 0x10a4 <__divsf3_pse+0x10>
    10ba:	35 d0       	rcall	.+106    	; 0x1126 <__divsf3_pse+0x92>
    10bc:	0e 2e       	mov	r0, r30
    10be:	3a f0       	brmi	.+14     	; 0x10ce <__divsf3_pse+0x3a>
    10c0:	e0 e8       	ldi	r30, 0x80	; 128
    10c2:	32 d0       	rcall	.+100    	; 0x1128 <__divsf3_pse+0x94>
    10c4:	91 50       	subi	r25, 0x01	; 1
    10c6:	50 40       	sbci	r21, 0x00	; 0
    10c8:	e6 95       	lsr	r30
    10ca:	00 1c       	adc	r0, r0
    10cc:	ca f7       	brpl	.-14     	; 0x10c0 <__divsf3_pse+0x2c>
    10ce:	2b d0       	rcall	.+86     	; 0x1126 <__divsf3_pse+0x92>
    10d0:	fe 2f       	mov	r31, r30
    10d2:	29 d0       	rcall	.+82     	; 0x1126 <__divsf3_pse+0x92>
    10d4:	66 0f       	add	r22, r22
    10d6:	77 1f       	adc	r23, r23
    10d8:	88 1f       	adc	r24, r24
    10da:	bb 1f       	adc	r27, r27
    10dc:	26 17       	cp	r18, r22
    10de:	37 07       	cpc	r19, r23
    10e0:	48 07       	cpc	r20, r24
    10e2:	ab 07       	cpc	r26, r27
    10e4:	b0 e8       	ldi	r27, 0x80	; 128
    10e6:	09 f0       	breq	.+2      	; 0x10ea <__divsf3_pse+0x56>
    10e8:	bb 0b       	sbc	r27, r27
    10ea:	80 2d       	mov	r24, r0
    10ec:	bf 01       	movw	r22, r30
    10ee:	ff 27       	eor	r31, r31
    10f0:	93 58       	subi	r25, 0x83	; 131
    10f2:	5f 4f       	sbci	r21, 0xFF	; 255
    10f4:	3a f0       	brmi	.+14     	; 0x1104 <__divsf3_pse+0x70>
    10f6:	9e 3f       	cpi	r25, 0xFE	; 254
    10f8:	51 05       	cpc	r21, r1
    10fa:	78 f0       	brcs	.+30     	; 0x111a <__divsf3_pse+0x86>
    10fc:	0c 94 35 09 	jmp	0x126a	; 0x126a <__fp_inf>
    1100:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__fp_szero>
    1104:	5f 3f       	cpi	r21, 0xFF	; 255
    1106:	e4 f3       	brlt	.-8      	; 0x1100 <__divsf3_pse+0x6c>
    1108:	98 3e       	cpi	r25, 0xE8	; 232
    110a:	d4 f3       	brlt	.-12     	; 0x1100 <__divsf3_pse+0x6c>
    110c:	86 95       	lsr	r24
    110e:	77 95       	ror	r23
    1110:	67 95       	ror	r22
    1112:	b7 95       	ror	r27
    1114:	f7 95       	ror	r31
    1116:	9f 5f       	subi	r25, 0xFF	; 255
    1118:	c9 f7       	brne	.-14     	; 0x110c <__divsf3_pse+0x78>
    111a:	88 0f       	add	r24, r24
    111c:	91 1d       	adc	r25, r1
    111e:	96 95       	lsr	r25
    1120:	87 95       	ror	r24
    1122:	97 f9       	bld	r25, 7
    1124:	08 95       	ret
    1126:	e1 e0       	ldi	r30, 0x01	; 1
    1128:	66 0f       	add	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	88 1f       	adc	r24, r24
    112e:	bb 1f       	adc	r27, r27
    1130:	62 17       	cp	r22, r18
    1132:	73 07       	cpc	r23, r19
    1134:	84 07       	cpc	r24, r20
    1136:	ba 07       	cpc	r27, r26
    1138:	20 f0       	brcs	.+8      	; 0x1142 <__divsf3_pse+0xae>
    113a:	62 1b       	sub	r22, r18
    113c:	73 0b       	sbc	r23, r19
    113e:	84 0b       	sbc	r24, r20
    1140:	ba 0b       	sbc	r27, r26
    1142:	ee 1f       	adc	r30, r30
    1144:	88 f7       	brcc	.-30     	; 0x1128 <__divsf3_pse+0x94>
    1146:	e0 95       	com	r30
    1148:	08 95       	ret

0000114a <__fixunssfsi>:
    114a:	0e 94 8e 09 	call	0x131c	; 0x131c <__fp_splitA>
    114e:	88 f0       	brcs	.+34     	; 0x1172 <__fixunssfsi+0x28>
    1150:	9f 57       	subi	r25, 0x7F	; 127
    1152:	98 f0       	brcs	.+38     	; 0x117a <__fixunssfsi+0x30>
    1154:	b9 2f       	mov	r27, r25
    1156:	99 27       	eor	r25, r25
    1158:	b7 51       	subi	r27, 0x17	; 23
    115a:	b0 f0       	brcs	.+44     	; 0x1188 <__fixunssfsi+0x3e>
    115c:	e1 f0       	breq	.+56     	; 0x1196 <__fixunssfsi+0x4c>
    115e:	66 0f       	add	r22, r22
    1160:	77 1f       	adc	r23, r23
    1162:	88 1f       	adc	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	1a f0       	brmi	.+6      	; 0x116e <__fixunssfsi+0x24>
    1168:	ba 95       	dec	r27
    116a:	c9 f7       	brne	.-14     	; 0x115e <__fixunssfsi+0x14>
    116c:	14 c0       	rjmp	.+40     	; 0x1196 <__fixunssfsi+0x4c>
    116e:	b1 30       	cpi	r27, 0x01	; 1
    1170:	91 f0       	breq	.+36     	; 0x1196 <__fixunssfsi+0x4c>
    1172:	0e 94 c0 09 	call	0x1380	; 0x1380 <__fp_zero>
    1176:	b1 e0       	ldi	r27, 0x01	; 1
    1178:	08 95       	ret
    117a:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <__fp_zero>
    117e:	67 2f       	mov	r22, r23
    1180:	78 2f       	mov	r23, r24
    1182:	88 27       	eor	r24, r24
    1184:	b8 5f       	subi	r27, 0xF8	; 248
    1186:	39 f0       	breq	.+14     	; 0x1196 <__fixunssfsi+0x4c>
    1188:	b9 3f       	cpi	r27, 0xF9	; 249
    118a:	cc f3       	brlt	.-14     	; 0x117e <__fixunssfsi+0x34>
    118c:	86 95       	lsr	r24
    118e:	77 95       	ror	r23
    1190:	67 95       	ror	r22
    1192:	b3 95       	inc	r27
    1194:	d9 f7       	brne	.-10     	; 0x118c <__fixunssfsi+0x42>
    1196:	3e f4       	brtc	.+14     	; 0x11a6 <__fixunssfsi+0x5c>
    1198:	90 95       	com	r25
    119a:	80 95       	com	r24
    119c:	70 95       	com	r23
    119e:	61 95       	neg	r22
    11a0:	7f 4f       	sbci	r23, 0xFF	; 255
    11a2:	8f 4f       	sbci	r24, 0xFF	; 255
    11a4:	9f 4f       	sbci	r25, 0xFF	; 255
    11a6:	08 95       	ret

000011a8 <__floatunsisf>:
    11a8:	e8 94       	clt
    11aa:	09 c0       	rjmp	.+18     	; 0x11be <__floatsisf+0x12>

000011ac <__floatsisf>:
    11ac:	97 fb       	bst	r25, 7
    11ae:	3e f4       	brtc	.+14     	; 0x11be <__floatsisf+0x12>
    11b0:	90 95       	com	r25
    11b2:	80 95       	com	r24
    11b4:	70 95       	com	r23
    11b6:	61 95       	neg	r22
    11b8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ba:	8f 4f       	sbci	r24, 0xFF	; 255
    11bc:	9f 4f       	sbci	r25, 0xFF	; 255
    11be:	99 23       	and	r25, r25
    11c0:	a9 f0       	breq	.+42     	; 0x11ec <__floatsisf+0x40>
    11c2:	f9 2f       	mov	r31, r25
    11c4:	96 e9       	ldi	r25, 0x96	; 150
    11c6:	bb 27       	eor	r27, r27
    11c8:	93 95       	inc	r25
    11ca:	f6 95       	lsr	r31
    11cc:	87 95       	ror	r24
    11ce:	77 95       	ror	r23
    11d0:	67 95       	ror	r22
    11d2:	b7 95       	ror	r27
    11d4:	f1 11       	cpse	r31, r1
    11d6:	f8 cf       	rjmp	.-16     	; 0x11c8 <__floatsisf+0x1c>
    11d8:	fa f4       	brpl	.+62     	; 0x1218 <__floatsisf+0x6c>
    11da:	bb 0f       	add	r27, r27
    11dc:	11 f4       	brne	.+4      	; 0x11e2 <__floatsisf+0x36>
    11de:	60 ff       	sbrs	r22, 0
    11e0:	1b c0       	rjmp	.+54     	; 0x1218 <__floatsisf+0x6c>
    11e2:	6f 5f       	subi	r22, 0xFF	; 255
    11e4:	7f 4f       	sbci	r23, 0xFF	; 255
    11e6:	8f 4f       	sbci	r24, 0xFF	; 255
    11e8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ea:	16 c0       	rjmp	.+44     	; 0x1218 <__floatsisf+0x6c>
    11ec:	88 23       	and	r24, r24
    11ee:	11 f0       	breq	.+4      	; 0x11f4 <__floatsisf+0x48>
    11f0:	96 e9       	ldi	r25, 0x96	; 150
    11f2:	11 c0       	rjmp	.+34     	; 0x1216 <__floatsisf+0x6a>
    11f4:	77 23       	and	r23, r23
    11f6:	21 f0       	breq	.+8      	; 0x1200 <__floatsisf+0x54>
    11f8:	9e e8       	ldi	r25, 0x8E	; 142
    11fa:	87 2f       	mov	r24, r23
    11fc:	76 2f       	mov	r23, r22
    11fe:	05 c0       	rjmp	.+10     	; 0x120a <__floatsisf+0x5e>
    1200:	66 23       	and	r22, r22
    1202:	71 f0       	breq	.+28     	; 0x1220 <__floatsisf+0x74>
    1204:	96 e8       	ldi	r25, 0x86	; 134
    1206:	86 2f       	mov	r24, r22
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	2a f0       	brmi	.+10     	; 0x1218 <__floatsisf+0x6c>
    120e:	9a 95       	dec	r25
    1210:	66 0f       	add	r22, r22
    1212:	77 1f       	adc	r23, r23
    1214:	88 1f       	adc	r24, r24
    1216:	da f7       	brpl	.-10     	; 0x120e <__floatsisf+0x62>
    1218:	88 0f       	add	r24, r24
    121a:	96 95       	lsr	r25
    121c:	87 95       	ror	r24
    121e:	97 f9       	bld	r25, 7
    1220:	08 95       	ret

00001222 <__fp_cmp>:
    1222:	99 0f       	add	r25, r25
    1224:	00 08       	sbc	r0, r0
    1226:	55 0f       	add	r21, r21
    1228:	aa 0b       	sbc	r26, r26
    122a:	e0 e8       	ldi	r30, 0x80	; 128
    122c:	fe ef       	ldi	r31, 0xFE	; 254
    122e:	16 16       	cp	r1, r22
    1230:	17 06       	cpc	r1, r23
    1232:	e8 07       	cpc	r30, r24
    1234:	f9 07       	cpc	r31, r25
    1236:	c0 f0       	brcs	.+48     	; 0x1268 <__fp_cmp+0x46>
    1238:	12 16       	cp	r1, r18
    123a:	13 06       	cpc	r1, r19
    123c:	e4 07       	cpc	r30, r20
    123e:	f5 07       	cpc	r31, r21
    1240:	98 f0       	brcs	.+38     	; 0x1268 <__fp_cmp+0x46>
    1242:	62 1b       	sub	r22, r18
    1244:	73 0b       	sbc	r23, r19
    1246:	84 0b       	sbc	r24, r20
    1248:	95 0b       	sbc	r25, r21
    124a:	39 f4       	brne	.+14     	; 0x125a <__fp_cmp+0x38>
    124c:	0a 26       	eor	r0, r26
    124e:	61 f0       	breq	.+24     	; 0x1268 <__fp_cmp+0x46>
    1250:	23 2b       	or	r18, r19
    1252:	24 2b       	or	r18, r20
    1254:	25 2b       	or	r18, r21
    1256:	21 f4       	brne	.+8      	; 0x1260 <__fp_cmp+0x3e>
    1258:	08 95       	ret
    125a:	0a 26       	eor	r0, r26
    125c:	09 f4       	brne	.+2      	; 0x1260 <__fp_cmp+0x3e>
    125e:	a1 40       	sbci	r26, 0x01	; 1
    1260:	a6 95       	lsr	r26
    1262:	8f ef       	ldi	r24, 0xFF	; 255
    1264:	81 1d       	adc	r24, r1
    1266:	81 1d       	adc	r24, r1
    1268:	08 95       	ret

0000126a <__fp_inf>:
    126a:	97 f9       	bld	r25, 7
    126c:	9f 67       	ori	r25, 0x7F	; 127
    126e:	80 e8       	ldi	r24, 0x80	; 128
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	08 95       	ret

00001276 <__fp_mintl>:
    1276:	88 23       	and	r24, r24
    1278:	71 f4       	brne	.+28     	; 0x1296 <__fp_mintl+0x20>
    127a:	77 23       	and	r23, r23
    127c:	21 f0       	breq	.+8      	; 0x1286 <__fp_mintl+0x10>
    127e:	98 50       	subi	r25, 0x08	; 8
    1280:	87 2b       	or	r24, r23
    1282:	76 2f       	mov	r23, r22
    1284:	07 c0       	rjmp	.+14     	; 0x1294 <__fp_mintl+0x1e>
    1286:	66 23       	and	r22, r22
    1288:	11 f4       	brne	.+4      	; 0x128e <__fp_mintl+0x18>
    128a:	99 27       	eor	r25, r25
    128c:	0d c0       	rjmp	.+26     	; 0x12a8 <__fp_mintl+0x32>
    128e:	90 51       	subi	r25, 0x10	; 16
    1290:	86 2b       	or	r24, r22
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	2a f0       	brmi	.+10     	; 0x12a2 <__fp_mintl+0x2c>
    1298:	9a 95       	dec	r25
    129a:	66 0f       	add	r22, r22
    129c:	77 1f       	adc	r23, r23
    129e:	88 1f       	adc	r24, r24
    12a0:	da f7       	brpl	.-10     	; 0x1298 <__fp_mintl+0x22>
    12a2:	88 0f       	add	r24, r24
    12a4:	96 95       	lsr	r25
    12a6:	87 95       	ror	r24
    12a8:	97 f9       	bld	r25, 7
    12aa:	08 95       	ret

000012ac <__fp_mpack>:
    12ac:	9f 3f       	cpi	r25, 0xFF	; 255
    12ae:	31 f0       	breq	.+12     	; 0x12bc <__fp_mpack_finite+0xc>

000012b0 <__fp_mpack_finite>:
    12b0:	91 50       	subi	r25, 0x01	; 1
    12b2:	20 f4       	brcc	.+8      	; 0x12bc <__fp_mpack_finite+0xc>
    12b4:	87 95       	ror	r24
    12b6:	77 95       	ror	r23
    12b8:	67 95       	ror	r22
    12ba:	b7 95       	ror	r27
    12bc:	88 0f       	add	r24, r24
    12be:	91 1d       	adc	r25, r1
    12c0:	96 95       	lsr	r25
    12c2:	87 95       	ror	r24
    12c4:	97 f9       	bld	r25, 7
    12c6:	08 95       	ret

000012c8 <__fp_nan>:
    12c8:	9f ef       	ldi	r25, 0xFF	; 255
    12ca:	80 ec       	ldi	r24, 0xC0	; 192
    12cc:	08 95       	ret

000012ce <__fp_pscA>:
    12ce:	00 24       	eor	r0, r0
    12d0:	0a 94       	dec	r0
    12d2:	16 16       	cp	r1, r22
    12d4:	17 06       	cpc	r1, r23
    12d6:	18 06       	cpc	r1, r24
    12d8:	09 06       	cpc	r0, r25
    12da:	08 95       	ret

000012dc <__fp_pscB>:
    12dc:	00 24       	eor	r0, r0
    12de:	0a 94       	dec	r0
    12e0:	12 16       	cp	r1, r18
    12e2:	13 06       	cpc	r1, r19
    12e4:	14 06       	cpc	r1, r20
    12e6:	05 06       	cpc	r0, r21
    12e8:	08 95       	ret

000012ea <__fp_round>:
    12ea:	09 2e       	mov	r0, r25
    12ec:	03 94       	inc	r0
    12ee:	00 0c       	add	r0, r0
    12f0:	11 f4       	brne	.+4      	; 0x12f6 <__fp_round+0xc>
    12f2:	88 23       	and	r24, r24
    12f4:	52 f0       	brmi	.+20     	; 0x130a <__fp_round+0x20>
    12f6:	bb 0f       	add	r27, r27
    12f8:	40 f4       	brcc	.+16     	; 0x130a <__fp_round+0x20>
    12fa:	bf 2b       	or	r27, r31
    12fc:	11 f4       	brne	.+4      	; 0x1302 <__fp_round+0x18>
    12fe:	60 ff       	sbrs	r22, 0
    1300:	04 c0       	rjmp	.+8      	; 0x130a <__fp_round+0x20>
    1302:	6f 5f       	subi	r22, 0xFF	; 255
    1304:	7f 4f       	sbci	r23, 0xFF	; 255
    1306:	8f 4f       	sbci	r24, 0xFF	; 255
    1308:	9f 4f       	sbci	r25, 0xFF	; 255
    130a:	08 95       	ret

0000130c <__fp_split3>:
    130c:	57 fd       	sbrc	r21, 7
    130e:	90 58       	subi	r25, 0x80	; 128
    1310:	44 0f       	add	r20, r20
    1312:	55 1f       	adc	r21, r21
    1314:	59 f0       	breq	.+22     	; 0x132c <__fp_splitA+0x10>
    1316:	5f 3f       	cpi	r21, 0xFF	; 255
    1318:	71 f0       	breq	.+28     	; 0x1336 <__fp_splitA+0x1a>
    131a:	47 95       	ror	r20

0000131c <__fp_splitA>:
    131c:	88 0f       	add	r24, r24
    131e:	97 fb       	bst	r25, 7
    1320:	99 1f       	adc	r25, r25
    1322:	61 f0       	breq	.+24     	; 0x133c <__fp_splitA+0x20>
    1324:	9f 3f       	cpi	r25, 0xFF	; 255
    1326:	79 f0       	breq	.+30     	; 0x1346 <__fp_splitA+0x2a>
    1328:	87 95       	ror	r24
    132a:	08 95       	ret
    132c:	12 16       	cp	r1, r18
    132e:	13 06       	cpc	r1, r19
    1330:	14 06       	cpc	r1, r20
    1332:	55 1f       	adc	r21, r21
    1334:	f2 cf       	rjmp	.-28     	; 0x131a <__fp_split3+0xe>
    1336:	46 95       	lsr	r20
    1338:	f1 df       	rcall	.-30     	; 0x131c <__fp_splitA>
    133a:	08 c0       	rjmp	.+16     	; 0x134c <__fp_splitA+0x30>
    133c:	16 16       	cp	r1, r22
    133e:	17 06       	cpc	r1, r23
    1340:	18 06       	cpc	r1, r24
    1342:	99 1f       	adc	r25, r25
    1344:	f1 cf       	rjmp	.-30     	; 0x1328 <__fp_splitA+0xc>
    1346:	86 95       	lsr	r24
    1348:	71 05       	cpc	r23, r1
    134a:	61 05       	cpc	r22, r1
    134c:	08 94       	sec
    134e:	08 95       	ret

00001350 <__fp_trunc>:
    1350:	0e 94 8e 09 	call	0x131c	; 0x131c <__fp_splitA>
    1354:	a0 f0       	brcs	.+40     	; 0x137e <__fp_trunc+0x2e>
    1356:	be e7       	ldi	r27, 0x7E	; 126
    1358:	b9 17       	cp	r27, r25
    135a:	88 f4       	brcc	.+34     	; 0x137e <__fp_trunc+0x2e>
    135c:	bb 27       	eor	r27, r27
    135e:	9f 38       	cpi	r25, 0x8F	; 143
    1360:	60 f4       	brcc	.+24     	; 0x137a <__fp_trunc+0x2a>
    1362:	16 16       	cp	r1, r22
    1364:	b1 1d       	adc	r27, r1
    1366:	67 2f       	mov	r22, r23
    1368:	78 2f       	mov	r23, r24
    136a:	88 27       	eor	r24, r24
    136c:	98 5f       	subi	r25, 0xF8	; 248
    136e:	f7 cf       	rjmp	.-18     	; 0x135e <__fp_trunc+0xe>
    1370:	86 95       	lsr	r24
    1372:	77 95       	ror	r23
    1374:	67 95       	ror	r22
    1376:	b1 1d       	adc	r27, r1
    1378:	93 95       	inc	r25
    137a:	96 39       	cpi	r25, 0x96	; 150
    137c:	c8 f3       	brcs	.-14     	; 0x1370 <__fp_trunc+0x20>
    137e:	08 95       	ret

00001380 <__fp_zero>:
    1380:	e8 94       	clt

00001382 <__fp_szero>:
    1382:	bb 27       	eor	r27, r27
    1384:	66 27       	eor	r22, r22
    1386:	77 27       	eor	r23, r23
    1388:	cb 01       	movw	r24, r22
    138a:	97 f9       	bld	r25, 7
    138c:	08 95       	ret

0000138e <__gesf2>:
    138e:	0e 94 11 09 	call	0x1222	; 0x1222 <__fp_cmp>
    1392:	08 f4       	brcc	.+2      	; 0x1396 <__gesf2+0x8>
    1394:	8f ef       	ldi	r24, 0xFF	; 255
    1396:	08 95       	ret

00001398 <__mulsf3>:
    1398:	0e 94 df 09 	call	0x13be	; 0x13be <__mulsf3x>
    139c:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__fp_round>
    13a0:	0e 94 67 09 	call	0x12ce	; 0x12ce <__fp_pscA>
    13a4:	38 f0       	brcs	.+14     	; 0x13b4 <__mulsf3+0x1c>
    13a6:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__fp_pscB>
    13aa:	20 f0       	brcs	.+8      	; 0x13b4 <__mulsf3+0x1c>
    13ac:	95 23       	and	r25, r21
    13ae:	11 f0       	breq	.+4      	; 0x13b4 <__mulsf3+0x1c>
    13b0:	0c 94 35 09 	jmp	0x126a	; 0x126a <__fp_inf>
    13b4:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__fp_nan>
    13b8:	11 24       	eor	r1, r1
    13ba:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__fp_szero>

000013be <__mulsf3x>:
    13be:	0e 94 86 09 	call	0x130c	; 0x130c <__fp_split3>
    13c2:	70 f3       	brcs	.-36     	; 0x13a0 <__mulsf3+0x8>

000013c4 <__mulsf3_pse>:
    13c4:	95 9f       	mul	r25, r21
    13c6:	c1 f3       	breq	.-16     	; 0x13b8 <__mulsf3+0x20>
    13c8:	95 0f       	add	r25, r21
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	55 1f       	adc	r21, r21
    13ce:	62 9f       	mul	r22, r18
    13d0:	f0 01       	movw	r30, r0
    13d2:	72 9f       	mul	r23, r18
    13d4:	bb 27       	eor	r27, r27
    13d6:	f0 0d       	add	r31, r0
    13d8:	b1 1d       	adc	r27, r1
    13da:	63 9f       	mul	r22, r19
    13dc:	aa 27       	eor	r26, r26
    13de:	f0 0d       	add	r31, r0
    13e0:	b1 1d       	adc	r27, r1
    13e2:	aa 1f       	adc	r26, r26
    13e4:	64 9f       	mul	r22, r20
    13e6:	66 27       	eor	r22, r22
    13e8:	b0 0d       	add	r27, r0
    13ea:	a1 1d       	adc	r26, r1
    13ec:	66 1f       	adc	r22, r22
    13ee:	82 9f       	mul	r24, r18
    13f0:	22 27       	eor	r18, r18
    13f2:	b0 0d       	add	r27, r0
    13f4:	a1 1d       	adc	r26, r1
    13f6:	62 1f       	adc	r22, r18
    13f8:	73 9f       	mul	r23, r19
    13fa:	b0 0d       	add	r27, r0
    13fc:	a1 1d       	adc	r26, r1
    13fe:	62 1f       	adc	r22, r18
    1400:	83 9f       	mul	r24, r19
    1402:	a0 0d       	add	r26, r0
    1404:	61 1d       	adc	r22, r1
    1406:	22 1f       	adc	r18, r18
    1408:	74 9f       	mul	r23, r20
    140a:	33 27       	eor	r19, r19
    140c:	a0 0d       	add	r26, r0
    140e:	61 1d       	adc	r22, r1
    1410:	23 1f       	adc	r18, r19
    1412:	84 9f       	mul	r24, r20
    1414:	60 0d       	add	r22, r0
    1416:	21 1d       	adc	r18, r1
    1418:	82 2f       	mov	r24, r18
    141a:	76 2f       	mov	r23, r22
    141c:	6a 2f       	mov	r22, r26
    141e:	11 24       	eor	r1, r1
    1420:	9f 57       	subi	r25, 0x7F	; 127
    1422:	50 40       	sbci	r21, 0x00	; 0
    1424:	9a f0       	brmi	.+38     	; 0x144c <__mulsf3_pse+0x88>
    1426:	f1 f0       	breq	.+60     	; 0x1464 <__mulsf3_pse+0xa0>
    1428:	88 23       	and	r24, r24
    142a:	4a f0       	brmi	.+18     	; 0x143e <__mulsf3_pse+0x7a>
    142c:	ee 0f       	add	r30, r30
    142e:	ff 1f       	adc	r31, r31
    1430:	bb 1f       	adc	r27, r27
    1432:	66 1f       	adc	r22, r22
    1434:	77 1f       	adc	r23, r23
    1436:	88 1f       	adc	r24, r24
    1438:	91 50       	subi	r25, 0x01	; 1
    143a:	50 40       	sbci	r21, 0x00	; 0
    143c:	a9 f7       	brne	.-22     	; 0x1428 <__mulsf3_pse+0x64>
    143e:	9e 3f       	cpi	r25, 0xFE	; 254
    1440:	51 05       	cpc	r21, r1
    1442:	80 f0       	brcs	.+32     	; 0x1464 <__mulsf3_pse+0xa0>
    1444:	0c 94 35 09 	jmp	0x126a	; 0x126a <__fp_inf>
    1448:	0c 94 c1 09 	jmp	0x1382	; 0x1382 <__fp_szero>
    144c:	5f 3f       	cpi	r21, 0xFF	; 255
    144e:	e4 f3       	brlt	.-8      	; 0x1448 <__mulsf3_pse+0x84>
    1450:	98 3e       	cpi	r25, 0xE8	; 232
    1452:	d4 f3       	brlt	.-12     	; 0x1448 <__mulsf3_pse+0x84>
    1454:	86 95       	lsr	r24
    1456:	77 95       	ror	r23
    1458:	67 95       	ror	r22
    145a:	b7 95       	ror	r27
    145c:	f7 95       	ror	r31
    145e:	e7 95       	ror	r30
    1460:	9f 5f       	subi	r25, 0xFF	; 255
    1462:	c1 f7       	brne	.-16     	; 0x1454 <__mulsf3_pse+0x90>
    1464:	fe 2b       	or	r31, r30
    1466:	88 0f       	add	r24, r24
    1468:	91 1d       	adc	r25, r1
    146a:	96 95       	lsr	r25
    146c:	87 95       	ror	r24
    146e:	97 f9       	bld	r25, 7
    1470:	08 95       	ret

00001472 <__tablejump2__>:
    1472:	ee 0f       	add	r30, r30
    1474:	ff 1f       	adc	r31, r31
    1476:	05 90       	lpm	r0, Z+
    1478:	f4 91       	lpm	r31, Z
    147a:	e0 2d       	mov	r30, r0
    147c:	09 94       	ijmp

0000147e <_exit>:
    147e:	f8 94       	cli

00001480 <__stop_program>:
    1480:	ff cf       	rjmp	.-2      	; 0x1480 <__stop_program>
